<?php
/**
 * InvoiceList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * InvoiceList Class Doc Comment
 *
 * @category    Class */
 // @description A page in a paginated invoice list
/** 
 * @package     Reepay
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceList implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'size' => 'int',
        'count' => 'int',
        'to' => 'string',
        'from' => 'string',
        'content' => '\Reepay\Model\Invoice[]',
        'range' => 'string',
        'next_page_token' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'size' => 'size',
        'count' => 'count',
        'to' => 'to',
        'from' => 'from',
        'content' => 'content',
        'range' => 'range',
        'next_page_token' => 'next_page_token'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'size' => 'setSize',
        'count' => 'setCount',
        'to' => 'setTo',
        'from' => 'setFrom',
        'content' => 'setContent',
        'range' => 'setRange',
        'next_page_token' => 'setNextPageToken'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'size' => 'getSize',
        'count' => 'getCount',
        'to' => 'getTo',
        'from' => 'getFrom',
        'content' => 'getContent',
        'range' => 'getRange',
        'next_page_token' => 'getNextPageToken'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['next_page_token'] = isset($data['next_page_token']) ? $data['next_page_token'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['size'] === null) {
            $invalid_properties[] = "'size' can't be null";
        }
        if (($this->container['size'] > 100.0)) {
            $invalid_properties[] = "invalid value for 'size', must be smaller than or equal to 100.0.";
        }

        if (($this->container['size'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'size', must be bigger than or equal to 1.0.";
        }

        if ($this->container['count'] === null) {
            $invalid_properties[] = "'count' can't be null";
        }
        if (($this->container['count'] > 100.0)) {
            $invalid_properties[] = "invalid value for 'count', must be smaller than or equal to 100.0.";
        }

        if (($this->container['count'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'count', must be bigger than or equal to 0.0.";
        }

        if ($this->container['to'] === null) {
            $invalid_properties[] = "'to' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalid_properties[] = "'from' can't be null";
        }
        if ($this->container['content'] === null) {
            $invalid_properties[] = "'content' can't be null";
        }
        if ($this->container['range'] === null) {
            $invalid_properties[] = "'range' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['size'] > 100.0) {
            return false;
        }
        if ($this->container['size'] < 1.0) {
            return false;
        }
        if ($this->container['count'] === null) {
            return false;
        }
        if ($this->container['count'] > 100.0) {
            return false;
        }
        if ($this->container['count'] < 0.0) {
            return false;
        }
        if ($this->container['to'] === null) {
            return false;
        }
        if ($this->container['from'] === null) {
            return false;
        }
        if ($this->container['content'] === null) {
            return false;
        }
        if ($this->container['range'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param int $size Page size used in paginated list
     * @return $this
     */
    public function setSize($size)
    {

        if ($size > 100.0) {
            throw new \InvalidArgumentException('invalid value for $size when calling InvoiceList., must be smaller than or equal to 100.0.');
        }
        if ($size < 1.0) {
            throw new \InvalidArgumentException('invalid value for $size when calling InvoiceList., must be bigger than or equal to 1.0.');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     * @param int $count Number of elements in current page. If less than page size it is the last page.
     * @return $this
     */
    public function setCount($count)
    {

        if ($count > 100.0) {
            throw new \InvalidArgumentException('invalid value for $count when calling InvoiceList., must be smaller than or equal to 100.0.');
        }
        if ($count < 0.0) {
            throw new \InvalidArgumentException('invalid value for $count when calling InvoiceList., must be bigger than or equal to 0.0.');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets to
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param string $to Local date and time range used as to (exclusive)
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param string $from Local date and time range used as from (inclusive)
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets content
     * @return \Reepay\Model\Invoice[]
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \Reepay\Model\Invoice[] $content List of invoices for current page
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets range
     * @return string
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     * @param string $range
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets next_page_token
     * @return string
     */
    public function getNextPageToken()
    {
        return $this->container['next_page_token'];
    }

    /**
     * Sets next_page_token
     * @param string $next_page_token Pagination token to use to get the next page. Notice that page size and range should be the same for all page requests. If not present the last page has been reached.
     * @return $this
     */
    public function setNextPageToken($next_page_token)
    {
        $this->container['next_page_token'] = $next_page_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


