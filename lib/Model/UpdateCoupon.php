<?php
/**
 * UpdateCoupon
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * UpdateCoupon Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateCoupon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateCoupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'allPlans' => 'bool',
        'eligiblePlans' => 'string[]',
        'maxRedemptions' => 'int',
        'validUntil' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'allPlans' => null,
        'eligiblePlans' => null,
        'maxRedemptions' => 'int32',
        'validUntil' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'allPlans' => 'all_plans',
        'eligiblePlans' => 'eligible_plans',
        'maxRedemptions' => 'max_redemptions',
        'validUntil' => 'valid_until'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'allPlans' => 'setAllPlans',
        'eligiblePlans' => 'setEligiblePlans',
        'maxRedemptions' => 'setMaxRedemptions',
        'validUntil' => 'setValidUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'allPlans' => 'getAllPlans',
        'eligiblePlans' => 'getEligiblePlans',
        'maxRedemptions' => 'getMaxRedemptions',
        'validUntil' => 'getValidUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['allPlans'] = isset($data['allPlans']) ? $data['allPlans'] : null;
        $this->container['eligiblePlans'] = isset($data['eligiblePlans']) ? $data['eligiblePlans'] : null;
        $this->container['maxRedemptions'] = isset($data['maxRedemptions']) ? $data['maxRedemptions'] : null;
        $this->container['validUntil'] = isset($data['validUntil']) ? $data['validUntil'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['maxRedemptions']) && ($this->container['maxRedemptions'] < 1)) {
            $invalidProperties[] = "invalid value for 'maxRedemptions', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal name for the coupon.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets allPlans
     *
     * @return bool
     */
    public function getAllPlans()
    {
        return $this->container['allPlans'];
    }

    /**
     * Sets allPlans
     *
     * @param bool $allPlans Whether all plans are eligible for this coupon. Defaults to false.
     *
     * @return $this
     */
    public function setAllPlans($allPlans)
    {
        $this->container['allPlans'] = $allPlans;

        return $this;
    }

    /**
     * Gets eligiblePlans
     *
     * @return string[]
     */
    public function getEligiblePlans()
    {
        return $this->container['eligiblePlans'];
    }

    /**
     * Sets eligiblePlans
     *
     * @param string[] $eligiblePlans If not all_plans are set to true, then the set of eligible plan handles must be defined.
     *
     * @return $this
     */
    public function setEligiblePlans($eligiblePlans)
    {
        $this->container['eligiblePlans'] = $eligiblePlans;

        return $this;
    }

    /**
     * Gets maxRedemptions
     *
     * @return int
     */
    public function getMaxRedemptions()
    {
        return $this->container['maxRedemptions'];
    }

    /**
     * Sets maxRedemptions
     *
     * @param int $maxRedemptions Optional maximum number of times this coupon can be redeemed.
     *
     * @return $this
     */
    public function setMaxRedemptions($maxRedemptions)
    {

        if (!is_null($maxRedemptions) && ($maxRedemptions < 1)) {
            throw new \InvalidArgumentException('invalid value for $maxRedemptions when calling UpdateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['maxRedemptions'] = $maxRedemptions;

        return $this;
    }

    /**
     * Gets validUntil
     *
     * @return string
     */
    public function getValidUntil()
    {
        return $this->container['validUntil'];
    }

    /**
     * Sets validUntil
     *
     * @param string $validUntil Optional date and time until which the coupon is redeemable. Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`.
     *
     * @return $this
     */
    public function setValidUntil($validUntil)
    {
        $this->container['validUntil'] = $validUntil;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


