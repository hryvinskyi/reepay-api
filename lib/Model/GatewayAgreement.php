<?php
/**
 * GatewayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * GatewayAgreement Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GatewayAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'state' => 'string',
        'type' => 'string',
        'usage' => 'string',
        'test' => 'bool',
        'created' => '\DateTime',
        'cardGatewayAgreement' => '\Reepay\Model\CardGatewayAgreement',
        'mpoAgreement' => '\Reepay\Model\MpoAgreement',
        'vippsAgreement' => '\Reepay\Model\VippsAgreement',
        'vippsRecurringAgreement' => '\Reepay\Model\VippsRecurringAgreement',
        'viabillAgreement' => '\Reepay\Model\ViabillAgreement',
        'anydayAgreement' => '\Reepay\Model\AnydayAgreement',
        'resursAgreement' => '\Reepay\Model\ResursAgreement',
        'klarnaAgreement' => '\Reepay\Model\KlarnaAgreement',
        'swish' => '\Reepay\Model\SwishAgreement',
        'applepayAgreement' => '\Reepay\Model\ApplepayAgreement',
        'googlepayAgreement' => '\Reepay\Model\GooglepayAgreement',
        'paypalAgreement' => '\Reepay\Model\PaypalAgreement',
        'mpsAgreement' => '\Reepay\Model\MpsAgreement',
        'pproAgreement' => '\Reepay\Model\PproAgreement'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'state' => null,
        'type' => null,
        'usage' => null,
        'test' => null,
        'created' => 'date-time',
        'cardGatewayAgreement' => null,
        'mpoAgreement' => null,
        'vippsAgreement' => null,
        'vippsRecurringAgreement' => null,
        'viabillAgreement' => null,
        'anydayAgreement' => null,
        'resursAgreement' => null,
        'klarnaAgreement' => null,
        'swish' => null,
        'applepayAgreement' => null,
        'googlepayAgreement' => null,
        'paypalAgreement' => null,
        'mpsAgreement' => null,
        'pproAgreement' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'type' => 'type',
        'usage' => 'usage',
        'test' => 'test',
        'created' => 'created',
        'cardGatewayAgreement' => 'card_gateway_agreement',
        'mpoAgreement' => 'mpo_agreement',
        'vippsAgreement' => 'vipps_agreement',
        'vippsRecurringAgreement' => 'vipps_recurring_agreement',
        'viabillAgreement' => 'viabill_agreement',
        'anydayAgreement' => 'anyday_agreement',
        'resursAgreement' => 'resurs_agreement',
        'klarnaAgreement' => 'klarna_agreement',
        'swish' => 'swish',
        'applepayAgreement' => 'applepay_agreement',
        'googlepayAgreement' => 'googlepay_agreement',
        'paypalAgreement' => 'paypal_agreement',
        'mpsAgreement' => 'mps_agreement',
        'pproAgreement' => 'ppro_agreement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'type' => 'setType',
        'usage' => 'setUsage',
        'test' => 'setTest',
        'created' => 'setCreated',
        'cardGatewayAgreement' => 'setCardGatewayAgreement',
        'mpoAgreement' => 'setMpoAgreement',
        'vippsAgreement' => 'setVippsAgreement',
        'vippsRecurringAgreement' => 'setVippsRecurringAgreement',
        'viabillAgreement' => 'setViabillAgreement',
        'anydayAgreement' => 'setAnydayAgreement',
        'resursAgreement' => 'setResursAgreement',
        'klarnaAgreement' => 'setKlarnaAgreement',
        'swish' => 'setSwish',
        'applepayAgreement' => 'setApplepayAgreement',
        'googlepayAgreement' => 'setGooglepayAgreement',
        'paypalAgreement' => 'setPaypalAgreement',
        'mpsAgreement' => 'setMpsAgreement',
        'pproAgreement' => 'setPproAgreement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'type' => 'getType',
        'usage' => 'getUsage',
        'test' => 'getTest',
        'created' => 'getCreated',
        'cardGatewayAgreement' => 'getCardGatewayAgreement',
        'mpoAgreement' => 'getMpoAgreement',
        'vippsAgreement' => 'getVippsAgreement',
        'vippsRecurringAgreement' => 'getVippsRecurringAgreement',
        'viabillAgreement' => 'getViabillAgreement',
        'anydayAgreement' => 'getAnydayAgreement',
        'resursAgreement' => 'getResursAgreement',
        'klarnaAgreement' => 'getKlarnaAgreement',
        'swish' => 'getSwish',
        'applepayAgreement' => 'getApplepayAgreement',
        'googlepayAgreement' => 'getGooglepayAgreement',
        'paypalAgreement' => 'getPaypalAgreement',
        'mpsAgreement' => 'getMpsAgreement',
        'pproAgreement' => 'getPproAgreement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DISABLED = 'disabled';
    const STATE_PENDING = 'pending';
    const STATE_DELETED = 'deleted';
    const TYPE_CREDITCARD = 'creditcard';
    const TYPE_VIABILL = 'viabill';
    const TYPE_ANYDAY = 'anyday';
    const TYPE_RESURS = 'resurs';
    const TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    const TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    const TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    const TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    const TYPE_MOBILEPAY = 'mobilepay';
    const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    const TYPE_APPLEPAY = 'applepay';
    const TYPE_GOOGLEPAY = 'googlepay';
    const TYPE_VIPPS = 'vipps';
    const TYPE_SWISH = 'swish';
    const TYPE_PAYPAL = 'paypal';
    const TYPE_PP_BANCONTACT = 'pp_bancontact';
    const TYPE_PP_BLIK = 'pp_blik';
    const TYPE_PP_GIROPAY = 'pp_giropay';
    const TYPE_PP_IDEAL = 'pp_ideal';
    const TYPE_PP_P24 = 'pp_p24';
    const TYPE_PP_SEPA = 'pp_sepa';
    const TYPE_PP_VERKKOPANKKI = 'pp_verkkopankki';
    const USAGE_SINGLE = 'single';
    const USAGE_REUSABLE = 'reusable';
    const USAGE_SUBSCRIPTION = 'subscription';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DISABLED,
            self::STATE_PENDING,
            self::STATE_DELETED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDITCARD,
            self::TYPE_VIABILL,
            self::TYPE_ANYDAY,
            self::TYPE_RESURS,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_MOBILEPAY,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_VIPPS,
            self::TYPE_SWISH,
            self::TYPE_PAYPAL,
            self::TYPE_PP_BANCONTACT,
            self::TYPE_PP_BLIK,
            self::TYPE_PP_GIROPAY,
            self::TYPE_PP_IDEAL,
            self::TYPE_PP_P24,
            self::TYPE_PP_SEPA,
            self::TYPE_PP_VERKKOPANKKI,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageAllowableValues()
    {
        return [
            self::USAGE_SINGLE,
            self::USAGE_REUSABLE,
            self::USAGE_SUBSCRIPTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['cardGatewayAgreement'] = isset($data['cardGatewayAgreement']) ? $data['cardGatewayAgreement'] : null;
        $this->container['mpoAgreement'] = isset($data['mpoAgreement']) ? $data['mpoAgreement'] : null;
        $this->container['vippsAgreement'] = isset($data['vippsAgreement']) ? $data['vippsAgreement'] : null;
        $this->container['vippsRecurringAgreement'] = isset($data['vippsRecurringAgreement']) ? $data['vippsRecurringAgreement'] : null;
        $this->container['viabillAgreement'] = isset($data['viabillAgreement']) ? $data['viabillAgreement'] : null;
        $this->container['anydayAgreement'] = isset($data['anydayAgreement']) ? $data['anydayAgreement'] : null;
        $this->container['resursAgreement'] = isset($data['resursAgreement']) ? $data['resursAgreement'] : null;
        $this->container['klarnaAgreement'] = isset($data['klarnaAgreement']) ? $data['klarnaAgreement'] : null;
        $this->container['swish'] = isset($data['swish']) ? $data['swish'] : null;
        $this->container['applepayAgreement'] = isset($data['applepayAgreement']) ? $data['applepayAgreement'] : null;
        $this->container['googlepayAgreement'] = isset($data['googlepayAgreement']) ? $data['googlepayAgreement'] : null;
        $this->container['paypalAgreement'] = isset($data['paypalAgreement']) ? $data['paypalAgreement'] : null;
        $this->container['mpsAgreement'] = isset($data['mpsAgreement']) ? $data['mpsAgreement'] : null;
        $this->container['pproAgreement'] = isset($data['pproAgreement']) ? $data['pproAgreement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['usage'] === null) {
            $invalidProperties[] = "'usage' can't be null";
        }
        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($this->container['usage']) && !in_array($this->container['usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Agreement id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Agreement state: `active`, `disabled`, `pending` or `deleted`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Agreement type: `card`, `viabill`, `anyday`, `resurs`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`, `mobilepay`, `mobilepay_subscriptions`, `applepay`, `googlepay`, `vipps`, `swish`, `paypal`, `pp_bancontact`, `pp_blik`, `pp_giropay`, `pp_ideal`, `pp_p24`, `pp_sepa`, `pp_verkkopankki`.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string $usage Agreement payment type usage: `single`, `reusable`, `subscription`
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $allowedValues = $this->getUsageAllowableValues();
        if (!in_array($usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Test agreement or not
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the agreement was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets cardGatewayAgreement
     *
     * @return \Reepay\Model\CardGatewayAgreement
     */
    public function getCardGatewayAgreement()
    {
        return $this->container['cardGatewayAgreement'];
    }

    /**
     * Sets cardGatewayAgreement
     *
     * @param \Reepay\Model\CardGatewayAgreement $cardGatewayAgreement cardGatewayAgreement
     *
     * @return $this
     */
    public function setCardGatewayAgreement($cardGatewayAgreement)
    {
        $this->container['cardGatewayAgreement'] = $cardGatewayAgreement;

        return $this;
    }

    /**
     * Gets mpoAgreement
     *
     * @return \Reepay\Model\MpoAgreement
     */
    public function getMpoAgreement()
    {
        return $this->container['mpoAgreement'];
    }

    /**
     * Sets mpoAgreement
     *
     * @param \Reepay\Model\MpoAgreement $mpoAgreement mpoAgreement
     *
     * @return $this
     */
    public function setMpoAgreement($mpoAgreement)
    {
        $this->container['mpoAgreement'] = $mpoAgreement;

        return $this;
    }

    /**
     * Gets vippsAgreement
     *
     * @return \Reepay\Model\VippsAgreement
     */
    public function getVippsAgreement()
    {
        return $this->container['vippsAgreement'];
    }

    /**
     * Sets vippsAgreement
     *
     * @param \Reepay\Model\VippsAgreement $vippsAgreement vippsAgreement
     *
     * @return $this
     */
    public function setVippsAgreement($vippsAgreement)
    {
        $this->container['vippsAgreement'] = $vippsAgreement;

        return $this;
    }

    /**
     * Gets vippsRecurringAgreement
     *
     * @return \Reepay\Model\VippsRecurringAgreement
     */
    public function getVippsRecurringAgreement()
    {
        return $this->container['vippsRecurringAgreement'];
    }

    /**
     * Sets vippsRecurringAgreement
     *
     * @param \Reepay\Model\VippsRecurringAgreement $vippsRecurringAgreement vippsRecurringAgreement
     *
     * @return $this
     */
    public function setVippsRecurringAgreement($vippsRecurringAgreement)
    {
        $this->container['vippsRecurringAgreement'] = $vippsRecurringAgreement;

        return $this;
    }

    /**
     * Gets viabillAgreement
     *
     * @return \Reepay\Model\ViabillAgreement
     */
    public function getViabillAgreement()
    {
        return $this->container['viabillAgreement'];
    }

    /**
     * Sets viabillAgreement
     *
     * @param \Reepay\Model\ViabillAgreement $viabillAgreement viabillAgreement
     *
     * @return $this
     */
    public function setViabillAgreement($viabillAgreement)
    {
        $this->container['viabillAgreement'] = $viabillAgreement;

        return $this;
    }

    /**
     * Gets anydayAgreement
     *
     * @return \Reepay\Model\AnydayAgreement
     */
    public function getAnydayAgreement()
    {
        return $this->container['anydayAgreement'];
    }

    /**
     * Sets anydayAgreement
     *
     * @param \Reepay\Model\AnydayAgreement $anydayAgreement anydayAgreement
     *
     * @return $this
     */
    public function setAnydayAgreement($anydayAgreement)
    {
        $this->container['anydayAgreement'] = $anydayAgreement;

        return $this;
    }

    /**
     * Gets resursAgreement
     *
     * @return \Reepay\Model\ResursAgreement
     */
    public function getResursAgreement()
    {
        return $this->container['resursAgreement'];
    }

    /**
     * Sets resursAgreement
     *
     * @param \Reepay\Model\ResursAgreement $resursAgreement resursAgreement
     *
     * @return $this
     */
    public function setResursAgreement($resursAgreement)
    {
        $this->container['resursAgreement'] = $resursAgreement;

        return $this;
    }

    /**
     * Gets klarnaAgreement
     *
     * @return \Reepay\Model\KlarnaAgreement
     */
    public function getKlarnaAgreement()
    {
        return $this->container['klarnaAgreement'];
    }

    /**
     * Sets klarnaAgreement
     *
     * @param \Reepay\Model\KlarnaAgreement $klarnaAgreement klarnaAgreement
     *
     * @return $this
     */
    public function setKlarnaAgreement($klarnaAgreement)
    {
        $this->container['klarnaAgreement'] = $klarnaAgreement;

        return $this;
    }

    /**
     * Gets swish
     *
     * @return \Reepay\Model\SwishAgreement
     */
    public function getSwish()
    {
        return $this->container['swish'];
    }

    /**
     * Sets swish
     *
     * @param \Reepay\Model\SwishAgreement $swish swish
     *
     * @return $this
     */
    public function setSwish($swish)
    {
        $this->container['swish'] = $swish;

        return $this;
    }

    /**
     * Gets applepayAgreement
     *
     * @return \Reepay\Model\ApplepayAgreement
     */
    public function getApplepayAgreement()
    {
        return $this->container['applepayAgreement'];
    }

    /**
     * Sets applepayAgreement
     *
     * @param \Reepay\Model\ApplepayAgreement $applepayAgreement applepayAgreement
     *
     * @return $this
     */
    public function setApplepayAgreement($applepayAgreement)
    {
        $this->container['applepayAgreement'] = $applepayAgreement;

        return $this;
    }

    /**
     * Gets googlepayAgreement
     *
     * @return \Reepay\Model\GooglepayAgreement
     */
    public function getGooglepayAgreement()
    {
        return $this->container['googlepayAgreement'];
    }

    /**
     * Sets googlepayAgreement
     *
     * @param \Reepay\Model\GooglepayAgreement $googlepayAgreement googlepayAgreement
     *
     * @return $this
     */
    public function setGooglepayAgreement($googlepayAgreement)
    {
        $this->container['googlepayAgreement'] = $googlepayAgreement;

        return $this;
    }

    /**
     * Gets paypalAgreement
     *
     * @return \Reepay\Model\PaypalAgreement
     */
    public function getPaypalAgreement()
    {
        return $this->container['paypalAgreement'];
    }

    /**
     * Sets paypalAgreement
     *
     * @param \Reepay\Model\PaypalAgreement $paypalAgreement paypalAgreement
     *
     * @return $this
     */
    public function setPaypalAgreement($paypalAgreement)
    {
        $this->container['paypalAgreement'] = $paypalAgreement;

        return $this;
    }

    /**
     * Gets mpsAgreement
     *
     * @return \Reepay\Model\MpsAgreement
     */
    public function getMpsAgreement()
    {
        return $this->container['mpsAgreement'];
    }

    /**
     * Sets mpsAgreement
     *
     * @param \Reepay\Model\MpsAgreement $mpsAgreement mpsAgreement
     *
     * @return $this
     */
    public function setMpsAgreement($mpsAgreement)
    {
        $this->container['mpsAgreement'] = $mpsAgreement;

        return $this;
    }

    /**
     * Gets pproAgreement
     *
     * @return \Reepay\Model\PproAgreement
     */
    public function getPproAgreement()
    {
        return $this->container['pproAgreement'];
    }

    /**
     * Sets pproAgreement
     *
     * @param \Reepay\Model\PproAgreement $pproAgreement pproAgreement
     *
     * @return $this
     */
    public function setPproAgreement($pproAgreement)
    {
        $this->container['pproAgreement'] = $pproAgreement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
