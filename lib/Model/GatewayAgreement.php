<?php
/**
 * GatewayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * GatewayAgreement Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Reepay
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GatewayAgreement implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'state' => 'string',
        'type' => 'string',
        'usage' => 'string',
        'test' => 'bool',
        'created' => '\DateTime',
        'card_gateway_agreement' => '\Reepay\Model\CardGatewayAgreement',
        'pgw_agreement' => '\Reepay\Model\PgwAgreement',
        'mpo_agreement' => '\Reepay\Model\MpoAgreement',
        'vipps_agreement' => '\Reepay\Model\VippsAgreement',
        'viabill_agreement' => '\Reepay\Model\ViabillAgreement',
        'resurs_agreement' => '\Reepay\Model\ResursAgreement',
        'klarna_agreement' => '\Reepay\Model\KlarnaAgreement',
        'swish' => '\Reepay\Model\SwishAgreement',
        'applepay_agreement' => '\Reepay\Model\ApplepayAgreement',
        'googlepay_agreement' => '\Reepay\Model\GooglepayAgreement',
        'paypal_agreement' => '\Reepay\Model\PaypalAgreement',
        'mps_agreement' => '\Reepay\Model\MpsAgreement',
        'ppro_agreement' => '\Reepay\Model\PproAgreement'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'state' => 'state',
        'type' => 'type',
        'usage' => 'usage',
        'test' => 'test',
        'created' => 'created',
        'card_gateway_agreement' => 'card_gateway_agreement',
        'pgw_agreement' => 'pgw_agreement',
        'mpo_agreement' => 'mpo_agreement',
        'vipps_agreement' => 'vipps_agreement',
        'viabill_agreement' => 'viabill_agreement',
        'resurs_agreement' => 'resurs_agreement',
        'klarna_agreement' => 'klarna_agreement',
        'swish' => 'swish',
        'applepay_agreement' => 'applepay_agreement',
        'googlepay_agreement' => 'googlepay_agreement',
        'paypal_agreement' => 'paypal_agreement',
        'mps_agreement' => 'mps_agreement',
        'ppro_agreement' => 'ppro_agreement'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'state' => 'setState',
        'type' => 'setType',
        'usage' => 'setUsage',
        'test' => 'setTest',
        'created' => 'setCreated',
        'card_gateway_agreement' => 'setCardGatewayAgreement',
        'pgw_agreement' => 'setPgwAgreement',
        'mpo_agreement' => 'setMpoAgreement',
        'vipps_agreement' => 'setVippsAgreement',
        'viabill_agreement' => 'setViabillAgreement',
        'resurs_agreement' => 'setResursAgreement',
        'klarna_agreement' => 'setKlarnaAgreement',
        'swish' => 'setSwish',
        'applepay_agreement' => 'setApplepayAgreement',
        'googlepay_agreement' => 'setGooglepayAgreement',
        'paypal_agreement' => 'setPaypalAgreement',
        'mps_agreement' => 'setMpsAgreement',
        'ppro_agreement' => 'setPproAgreement'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'state' => 'getState',
        'type' => 'getType',
        'usage' => 'getUsage',
        'test' => 'getTest',
        'created' => 'getCreated',
        'card_gateway_agreement' => 'getCardGatewayAgreement',
        'pgw_agreement' => 'getPgwAgreement',
        'mpo_agreement' => 'getMpoAgreement',
        'vipps_agreement' => 'getVippsAgreement',
        'viabill_agreement' => 'getViabillAgreement',
        'resurs_agreement' => 'getResursAgreement',
        'klarna_agreement' => 'getKlarnaAgreement',
        'swish' => 'getSwish',
        'applepay_agreement' => 'getApplepayAgreement',
        'googlepay_agreement' => 'getGooglepayAgreement',
        'paypal_agreement' => 'getPaypalAgreement',
        'mps_agreement' => 'getMpsAgreement',
        'ppro_agreement' => 'getPproAgreement'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DISABLED = 'disabled';
    const STATE_PENDING = 'pending';
    const STATE_DELETED = 'deleted';
    const TYPE_CREDITCARD = 'creditcard';
    const TYPE_VIABILL = 'viabill';
    const TYPE_RESURS = 'resurs';
    const TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    const TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    const TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    const TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    const TYPE_MOBILEPAY = 'mobilepay';
    const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    const TYPE_APPLEPAY = 'applepay';
    const TYPE_GOOGLEPAY = 'googlepay';
    const TYPE_VIPPS = 'vipps';
    const TYPE_SWISH = 'swish';
    const TYPE_PAYPAL = 'paypal';
    const TYPE_PP_BLIK = 'pp_blik';
    const TYPE_PP_IDEAL = 'pp_ideal';
    const TYPE_PP_P24 = 'pp_p24';
    const USAGE_SINGLE = 'single';
    const USAGE_REUSABLE = 'reusable';
    const USAGE_SUBSCRIPTION = 'subscription';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DISABLED,
            self::STATE_PENDING,
            self::STATE_DELETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDITCARD,
            self::TYPE_VIABILL,
            self::TYPE_RESURS,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_MOBILEPAY,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_VIPPS,
            self::TYPE_SWISH,
            self::TYPE_PAYPAL,
            self::TYPE_PP_BLIK,
            self::TYPE_PP_IDEAL,
            self::TYPE_PP_P24,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUsageAllowableValues()
    {
        return [
            self::USAGE_SINGLE,
            self::USAGE_REUSABLE,
            self::USAGE_SUBSCRIPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['card_gateway_agreement'] = isset($data['card_gateway_agreement']) ? $data['card_gateway_agreement'] : null;
        $this->container['pgw_agreement'] = isset($data['pgw_agreement']) ? $data['pgw_agreement'] : null;
        $this->container['mpo_agreement'] = isset($data['mpo_agreement']) ? $data['mpo_agreement'] : null;
        $this->container['vipps_agreement'] = isset($data['vipps_agreement']) ? $data['vipps_agreement'] : null;
        $this->container['viabill_agreement'] = isset($data['viabill_agreement']) ? $data['viabill_agreement'] : null;
        $this->container['resurs_agreement'] = isset($data['resurs_agreement']) ? $data['resurs_agreement'] : null;
        $this->container['klarna_agreement'] = isset($data['klarna_agreement']) ? $data['klarna_agreement'] : null;
        $this->container['swish'] = isset($data['swish']) ? $data['swish'] : null;
        $this->container['applepay_agreement'] = isset($data['applepay_agreement']) ? $data['applepay_agreement'] : null;
        $this->container['googlepay_agreement'] = isset($data['googlepay_agreement']) ? $data['googlepay_agreement'] : null;
        $this->container['paypal_agreement'] = isset($data['paypal_agreement']) ? $data['paypal_agreement'] : null;
        $this->container['mps_agreement'] = isset($data['mps_agreement']) ? $data['mps_agreement'] : null;
        $this->container['ppro_agreement'] = isset($data['ppro_agreement']) ? $data['ppro_agreement'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalid_properties[] = "'state' can't be null";
        }
        $allowed_values = array("active", "disabled", "pending", "deleted");
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of #{allowed_values}.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = array("creditcard", "viabill", "resurs", "klarna_pay_now", "klarna_pay_later", "klarna_slice_it", "klarna_direct_bank_transfer", "klarna_direct_debit", "mobilepay", "mobilepay_subscriptions", "applepay", "googlepay", "vipps", "swish", "paypal", "pp_blik", "pp_ideal", "pp_p24");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if ($this->container['usage'] === null) {
            $invalid_properties[] = "'usage' can't be null";
        }
        $allowed_values = array("single", "reusable", "subscription");
        if (!in_array($this->container['usage'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'usage', must be one of #{allowed_values}.";
        }

        if ($this->container['test'] === null) {
            $invalid_properties[] = "'test' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        $allowed_values = array("active", "disabled", "pending", "deleted");
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = array("creditcard", "viabill", "resurs", "klarna_pay_now", "klarna_pay_later", "klarna_slice_it", "klarna_direct_bank_transfer", "klarna_direct_debit", "mobilepay", "mobilepay_subscriptions", "applepay", "googlepay", "vipps", "swish", "paypal", "pp_blik", "pp_ideal", "pp_p24");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['usage'] === null) {
            return false;
        }
        $allowed_values = array("single", "reusable", "subscription");
        if (!in_array($this->container['usage'], $allowed_values)) {
            return false;
        }
        if ($this->container['test'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Agreement id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Agreement state: `active`, `disabled`, `pending` or `deleted`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('active', 'disabled', 'pending', 'deleted');
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'disabled', 'pending', 'deleted'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Agreement type: `card`, `viabill`, `resurs`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`, `mobilepay`, `mobilepay_subscriptions`, `applepay`, `googlepay`, `vipps`, `swish`, `paypal`, `pp_blik`, `pp_ideal`, `pp_p24`.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('creditcard', 'viabill', 'resurs', 'klarna_pay_now', 'klarna_pay_later', 'klarna_slice_it', 'klarna_direct_bank_transfer', 'klarna_direct_debit', 'mobilepay', 'mobilepay_subscriptions', 'applepay', 'googlepay', 'vipps', 'swish', 'paypal', 'pp_blik', 'pp_ideal', 'pp_p24');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'creditcard', 'viabill', 'resurs', 'klarna_pay_now', 'klarna_pay_later', 'klarna_slice_it', 'klarna_direct_bank_transfer', 'klarna_direct_debit', 'mobilepay', 'mobilepay_subscriptions', 'applepay', 'googlepay', 'vipps', 'swish', 'paypal', 'pp_blik', 'pp_ideal', 'pp_p24'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     * @param string $usage Agreement payment type usage: `single`, `reusable`, `subscription`
     * @return $this
     */
    public function setUsage($usage)
    {
        $allowed_values = array('single', 'reusable', 'subscription');
        if (!in_array($usage, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'usage', must be one of 'single', 'reusable', 'subscription'");
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets test
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     * @param bool $test Test agreement or not
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created Date when the agreement was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets card_gateway_agreement
     * @return \Reepay\Model\CardGatewayAgreement
     */
    public function getCardGatewayAgreement()
    {
        return $this->container['card_gateway_agreement'];
    }

    /**
     * Sets card_gateway_agreement
     * @param \Reepay\Model\CardGatewayAgreement $card_gateway_agreement Card gateway agreement details in case of card gateway
     * @return $this
     */
    public function setCardGatewayAgreement($card_gateway_agreement)
    {
        $this->container['card_gateway_agreement'] = $card_gateway_agreement;

        return $this;
    }

    /**
     * Gets pgw_agreement
     * @return \Reepay\Model\PgwAgreement
     */
    public function getPgwAgreement()
    {
        return $this->container['pgw_agreement'];
    }

    /**
     * Sets pgw_agreement
     * @param \Reepay\Model\PgwAgreement $pgw_agreement Payment gateway in case of payment gateway
     * @return $this
     */
    public function setPgwAgreement($pgw_agreement)
    {
        $this->container['pgw_agreement'] = $pgw_agreement;

        return $this;
    }

    /**
     * Gets mpo_agreement
     * @return \Reepay\Model\MpoAgreement
     */
    public function getMpoAgreement()
    {
        return $this->container['mpo_agreement'];
    }

    /**
     * Sets mpo_agreement
     * @param \Reepay\Model\MpoAgreement $mpo_agreement MobilePay online agreement details
     * @return $this
     */
    public function setMpoAgreement($mpo_agreement)
    {
        $this->container['mpo_agreement'] = $mpo_agreement;

        return $this;
    }

    /**
     * Gets vipps_agreement
     * @return \Reepay\Model\VippsAgreement
     */
    public function getVippsAgreement()
    {
        return $this->container['vipps_agreement'];
    }

    /**
     * Sets vipps_agreement
     * @param \Reepay\Model\VippsAgreement $vipps_agreement Vipps agreement details
     * @return $this
     */
    public function setVippsAgreement($vipps_agreement)
    {
        $this->container['vipps_agreement'] = $vipps_agreement;

        return $this;
    }

    /**
     * Gets viabill_agreement
     * @return \Reepay\Model\ViabillAgreement
     */
    public function getViabillAgreement()
    {
        return $this->container['viabill_agreement'];
    }

    /**
     * Sets viabill_agreement
     * @param \Reepay\Model\ViabillAgreement $viabill_agreement ViaBill agreement details
     * @return $this
     */
    public function setViabillAgreement($viabill_agreement)
    {
        $this->container['viabill_agreement'] = $viabill_agreement;

        return $this;
    }

    /**
     * Gets resurs_agreement
     * @return \Reepay\Model\ResursAgreement
     */
    public function getResursAgreement()
    {
        return $this->container['resurs_agreement'];
    }

    /**
     * Sets resurs_agreement
     * @param \Reepay\Model\ResursAgreement $resurs_agreement Resurs Bank agreement details
     * @return $this
     */
    public function setResursAgreement($resurs_agreement)
    {
        $this->container['resurs_agreement'] = $resurs_agreement;

        return $this;
    }

    /**
     * Gets klarna_agreement
     * @return \Reepay\Model\KlarnaAgreement
     */
    public function getKlarnaAgreement()
    {
        return $this->container['klarna_agreement'];
    }

    /**
     * Sets klarna_agreement
     * @param \Reepay\Model\KlarnaAgreement $klarna_agreement Klarna agreement details
     * @return $this
     */
    public function setKlarnaAgreement($klarna_agreement)
    {
        $this->container['klarna_agreement'] = $klarna_agreement;

        return $this;
    }

    /**
     * Gets swish
     * @return \Reepay\Model\SwishAgreement
     */
    public function getSwish()
    {
        return $this->container['swish'];
    }

    /**
     * Sets swish
     * @param \Reepay\Model\SwishAgreement $swish Swish agreement details
     * @return $this
     */
    public function setSwish($swish)
    {
        $this->container['swish'] = $swish;

        return $this;
    }

    /**
     * Gets applepay_agreement
     * @return \Reepay\Model\ApplepayAgreement
     */
    public function getApplepayAgreement()
    {
        return $this->container['applepay_agreement'];
    }

    /**
     * Sets applepay_agreement
     * @param \Reepay\Model\ApplepayAgreement $applepay_agreement ApplePay agreement details
     * @return $this
     */
    public function setApplepayAgreement($applepay_agreement)
    {
        $this->container['applepay_agreement'] = $applepay_agreement;

        return $this;
    }

    /**
     * Gets googlepay_agreement
     * @return \Reepay\Model\GooglepayAgreement
     */
    public function getGooglepayAgreement()
    {
        return $this->container['googlepay_agreement'];
    }

    /**
     * Sets googlepay_agreement
     * @param \Reepay\Model\GooglepayAgreement $googlepay_agreement GooglePay agreement details
     * @return $this
     */
    public function setGooglepayAgreement($googlepay_agreement)
    {
        $this->container['googlepay_agreement'] = $googlepay_agreement;

        return $this;
    }

    /**
     * Gets paypal_agreement
     * @return \Reepay\Model\PaypalAgreement
     */
    public function getPaypalAgreement()
    {
        return $this->container['paypal_agreement'];
    }

    /**
     * Sets paypal_agreement
     * @param \Reepay\Model\PaypalAgreement $paypal_agreement PayPal agreement details
     * @return $this
     */
    public function setPaypalAgreement($paypal_agreement)
    {
        $this->container['paypal_agreement'] = $paypal_agreement;

        return $this;
    }

    /**
     * Gets mps_agreement
     * @return \Reepay\Model\MpsAgreement
     */
    public function getMpsAgreement()
    {
        return $this->container['mps_agreement'];
    }

    /**
     * Sets mps_agreement
     * @param \Reepay\Model\MpsAgreement $mps_agreement MobilePay Subscriptions agreement details in case of MobilePay Subscriptions
     * @return $this
     */
    public function setMpsAgreement($mps_agreement)
    {
        $this->container['mps_agreement'] = $mps_agreement;

        return $this;
    }

    /**
     * Gets ppro_agreement
     * @return \Reepay\Model\PproAgreement
     */
    public function getPproAgreement()
    {
        return $this->container['ppro_agreement'];
    }

    /**
     * Sets ppro_agreement
     * @param \Reepay\Model\PproAgreement $ppro_agreement Local payment methods agreement details
     * @return $this
     */
    public function setPproAgreement($ppro_agreement)
    {
        $this->container['ppro_agreement'] = $ppro_agreement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


