<?php
/**
 * SubscriptionChangeJournal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * SubscriptionChangeJournal Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Reepay
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionChangeJournal implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionChangeJournal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'change' => '\Reepay\Model\SubscriptionChange',
        'invoice' => '\Reepay\Model\Invoice',
        'new_plan' => '\Reepay\Model\Plan',
        'compensation_amount' => 'int',
        'compensation_invoice' => '\Reepay\Model\Invoice',
        'changed_period_start_date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'change' => 'change',
        'invoice' => 'invoice',
        'new_plan' => 'new_plan',
        'compensation_amount' => 'compensation_amount',
        'compensation_invoice' => 'compensation_invoice',
        'changed_period_start_date' => 'changed_period_start_date'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'change' => 'setChange',
        'invoice' => 'setInvoice',
        'new_plan' => 'setNewPlan',
        'compensation_amount' => 'setCompensationAmount',
        'compensation_invoice' => 'setCompensationInvoice',
        'changed_period_start_date' => 'setChangedPeriodStartDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'change' => 'getChange',
        'invoice' => 'getInvoice',
        'new_plan' => 'getNewPlan',
        'compensation_amount' => 'getCompensationAmount',
        'compensation_invoice' => 'getCompensationInvoice',
        'changed_period_start_date' => 'getChangedPeriodStartDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['new_plan'] = isset($data['new_plan']) ? $data['new_plan'] : null;
        $this->container['compensation_amount'] = isset($data['compensation_amount']) ? $data['compensation_amount'] : null;
        $this->container['compensation_invoice'] = isset($data['compensation_invoice']) ? $data['compensation_invoice'] : null;
        $this->container['changed_period_start_date'] = isset($data['changed_period_start_date']) ? $data['changed_period_start_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets change
     * @return \Reepay\Model\SubscriptionChange
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     * @param \Reepay\Model\SubscriptionChange $change Subscription change object applied, if null the change has no impact
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets invoice
     * @return \Reepay\Model\Invoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     * @param \Reepay\Model\Invoice $invoice New invoice the change resulted in
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets new_plan
     * @return \Reepay\Model\Plan
     */
    public function getNewPlan()
    {
        return $this->container['new_plan'];
    }

    /**
     * Sets new_plan
     * @param \Reepay\Model\Plan $new_plan Subscription plan object if change resulted in a new plan
     * @return $this
     */
    public function setNewPlan($new_plan)
    {
        $this->container['new_plan'] = $new_plan;

        return $this;
    }

    /**
     * Gets compensation_amount
     * @return int
     */
    public function getCompensationAmount()
    {
        return $this->container['compensation_amount'];
    }

    /**
     * Sets compensation_amount
     * @param int $compensation_amount If compensation the compensation amount
     * @return $this
     */
    public function setCompensationAmount($compensation_amount)
    {
        $this->container['compensation_amount'] = $compensation_amount;

        return $this;
    }

    /**
     * Gets compensation_invoice
     * @return \Reepay\Model\Invoice
     */
    public function getCompensationInvoice()
    {
        return $this->container['compensation_invoice'];
    }

    /**
     * Sets compensation_invoice
     * @param \Reepay\Model\Invoice $compensation_invoice If compensation the credited or refunded invoice. The latest credit note gives details on the crediting.
     * @return $this
     */
    public function setCompensationInvoice($compensation_invoice)
    {
        $this->container['compensation_invoice'] = $compensation_invoice;

        return $this;
    }

    /**
     * Gets changed_period_start_date
     * @return \DateTime
     */
    public function getChangedPeriodStartDate()
    {
        return $this->container['changed_period_start_date'];
    }

    /**
     * Sets changed_period_start_date
     * @param \DateTime $changed_period_start_date If the change resulted in a new billing cycle this is the start date used
     * @return $this
     */
    public function setChangedPeriodStartDate($changed_period_start_date)
    {
        $this->container['changed_period_start_date'] = $changed_period_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


