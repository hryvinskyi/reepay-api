<?php
/**
 * CreateSubscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CreateSubscription Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateSubscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer' => 'string',
        'plan' => 'string',
        'amount' => 'int',
        'quantity' => 'int',
        'test' => 'bool',
        'handle' => 'string',
        'metadata' => 'map[string,object]',
        'source' => 'string',
        'createCustomer' => '\Reepay\Model\CreateCustomer',
        'planVersion' => 'int',
        'amountInclVat' => 'bool',
        'generateHandle' => 'bool',
        'startDate' => 'string',
        'endDate' => 'string',
        'graceDuration' => 'int',
        'noTrial' => 'bool',
        'noSetupFee' => 'bool',
        'trialPeriod' => 'string',
        'subscriptionDiscounts' => '\Reepay\Model\CreateSubscriptionDiscount[]',
        'couponCodes' => 'string[]',
        'addOns' => '\Reepay\Model\CreateSubscriptionAddOn[]',
        'additionalCosts' => '\Reepay\Model\CreateSubscriptionAdditionalCost[]',
        'signupMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer' => null,
        'plan' => null,
        'amount' => 'int32',
        'quantity' => 'int32',
        'test' => null,
        'handle' => null,
        'metadata' => null,
        'source' => null,
        'createCustomer' => null,
        'planVersion' => 'int32',
        'amountInclVat' => null,
        'generateHandle' => null,
        'startDate' => null,
        'endDate' => null,
        'graceDuration' => 'int64',
        'noTrial' => null,
        'noSetupFee' => null,
        'trialPeriod' => null,
        'subscriptionDiscounts' => null,
        'couponCodes' => null,
        'addOns' => null,
        'additionalCosts' => null,
        'signupMethod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'customer',
        'plan' => 'plan',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'test' => 'test',
        'handle' => 'handle',
        'metadata' => 'metadata',
        'source' => 'source',
        'createCustomer' => 'create_customer',
        'planVersion' => 'plan_version',
        'amountInclVat' => 'amount_incl_vat',
        'generateHandle' => 'generate_handle',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'graceDuration' => 'grace_duration',
        'noTrial' => 'no_trial',
        'noSetupFee' => 'no_setup_fee',
        'trialPeriod' => 'trial_period',
        'subscriptionDiscounts' => 'subscription_discounts',
        'couponCodes' => 'coupon_codes',
        'addOns' => 'add_ons',
        'additionalCosts' => 'additional_costs',
        'signupMethod' => 'signup_method'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'plan' => 'setPlan',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'test' => 'setTest',
        'handle' => 'setHandle',
        'metadata' => 'setMetadata',
        'source' => 'setSource',
        'createCustomer' => 'setCreateCustomer',
        'planVersion' => 'setPlanVersion',
        'amountInclVat' => 'setAmountInclVat',
        'generateHandle' => 'setGenerateHandle',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'graceDuration' => 'setGraceDuration',
        'noTrial' => 'setNoTrial',
        'noSetupFee' => 'setNoSetupFee',
        'trialPeriod' => 'setTrialPeriod',
        'subscriptionDiscounts' => 'setSubscriptionDiscounts',
        'couponCodes' => 'setCouponCodes',
        'addOns' => 'setAddOns',
        'additionalCosts' => 'setAdditionalCosts',
        'signupMethod' => 'setSignupMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'plan' => 'getPlan',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'test' => 'getTest',
        'handle' => 'getHandle',
        'metadata' => 'getMetadata',
        'source' => 'getSource',
        'createCustomer' => 'getCreateCustomer',
        'planVersion' => 'getPlanVersion',
        'amountInclVat' => 'getAmountInclVat',
        'generateHandle' => 'getGenerateHandle',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'graceDuration' => 'getGraceDuration',
        'noTrial' => 'getNoTrial',
        'noSetupFee' => 'getNoSetupFee',
        'trialPeriod' => 'getTrialPeriod',
        'subscriptionDiscounts' => 'getSubscriptionDiscounts',
        'couponCodes' => 'getCouponCodes',
        'addOns' => 'getAddOns',
        'additionalCosts' => 'getAdditionalCosts',
        'signupMethod' => 'getSignupMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['createCustomer'] = isset($data['createCustomer']) ? $data['createCustomer'] : null;
        $this->container['planVersion'] = isset($data['planVersion']) ? $data['planVersion'] : null;
        $this->container['amountInclVat'] = isset($data['amountInclVat']) ? $data['amountInclVat'] : null;
        $this->container['generateHandle'] = isset($data['generateHandle']) ? $data['generateHandle'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['graceDuration'] = isset($data['graceDuration']) ? $data['graceDuration'] : null;
        $this->container['noTrial'] = isset($data['noTrial']) ? $data['noTrial'] : null;
        $this->container['noSetupFee'] = isset($data['noSetupFee']) ? $data['noSetupFee'] : null;
        $this->container['trialPeriod'] = isset($data['trialPeriod']) ? $data['trialPeriod'] : null;
        $this->container['subscriptionDiscounts'] = isset($data['subscriptionDiscounts']) ? $data['subscriptionDiscounts'] : null;
        $this->container['couponCodes'] = isset($data['couponCodes']) ? $data['couponCodes'] : null;
        $this->container['addOns'] = isset($data['addOns']) ? $data['addOns'] : null;
        $this->container['additionalCosts'] = isset($data['additionalCosts']) ? $data['additionalCosts'] : null;
        $this->container['signupMethod'] = isset($data['signupMethod']) ? $data['signupMethod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        if (!is_null($this->container['amount']) && ($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['planVersion']) && ($this->container['planVersion'] < 1)) {
            $invalidProperties[] = "invalid value for 'planVersion', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['graceDuration']) && ($this->container['graceDuration'] < 0)) {
            $invalidProperties[] = "invalid value for 'graceDuration', must be bigger than or equal to 0.";
        }

        if ($this->container['signupMethod'] === null) {
            $invalidProperties[] = "'signupMethod' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan Plan handle
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (!is_null($amount) && ($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CreateSubscription., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Test flag. If given it will be verified that the account state matches the intended create state.
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,object]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,object] $metadata Custom metadata.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The payment method source if signup method `source`. Either an existing payment method for the customer, e.g. existing card id `ca_...` or a card token `ct_...`.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets createCustomer
     *
     * @return \Reepay\Model\CreateCustomer
     */
    public function getCreateCustomer()
    {
        return $this->container['createCustomer'];
    }

    /**
     * Sets createCustomer
     *
     * @param \Reepay\Model\CreateCustomer $createCustomer Create customer and subscription in an atomic operation
     *
     * @return $this
     */
    public function setCreateCustomer($createCustomer)
    {
        $this->container['createCustomer'] = $createCustomer;

        return $this;
    }

    /**
     * Gets planVersion
     *
     * @return int
     */
    public function getPlanVersion()
    {
        return $this->container['planVersion'];
    }

    /**
     * Sets planVersion
     *
     * @param int $planVersion Optional plan version, default is to use newest version of plan
     *
     * @return $this
     */
    public function setPlanVersion($planVersion)
    {

        if (!is_null($planVersion) && ($planVersion < 1)) {
            throw new \InvalidArgumentException('invalid value for $planVersion when calling CreateSubscription., must be bigger than or equal to 1.');
        }

        $this->container['planVersion'] = $planVersion;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return bool
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param bool $amountInclVat Whether the optional amount is including VAT. Defaults to true.
     *
     * @return $this
     */
    public function setAmountInclVat($amountInclVat)
    {
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets generateHandle
     *
     * @return bool
     */
    public function getGenerateHandle()
    {
        return $this->container['generateHandle'];
    }

    /**
     * Sets generateHandle
     *
     * @param bool $generateHandle Auto generate handle on the form sub-[sequence_number]
     *
     * @return $this
     */
    public function setGenerateHandle($generateHandle)
    {
        $this->container['generateHandle'] = $generateHandle;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string $endDate Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets graceDuration
     *
     * @return int
     */
    public function getGraceDuration()
    {
        return $this->container['graceDuration'];
    }

    /**
     * Sets graceDuration
     *
     * @param int $graceDuration A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
     *
     * @return $this
     */
    public function setGraceDuration($graceDuration)
    {

        if (!is_null($graceDuration) && ($graceDuration < 0)) {
            throw new \InvalidArgumentException('invalid value for $graceDuration when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['graceDuration'] = $graceDuration;

        return $this;
    }

    /**
     * Gets noTrial
     *
     * @return bool
     */
    public function getNoTrial()
    {
        return $this->container['noTrial'];
    }

    /**
     * Sets noTrial
     *
     * @param bool $noTrial Override plan trial settings and disable trial
     *
     * @return $this
     */
    public function setNoTrial($noTrial)
    {
        $this->container['noTrial'] = $noTrial;

        return $this;
    }

    /**
     * Gets noSetupFee
     *
     * @return bool
     */
    public function getNoSetupFee()
    {
        return $this->container['noSetupFee'];
    }

    /**
     * Sets noSetupFee
     *
     * @param bool $noSetupFee Override plan setup fee settings and disable fee
     *
     * @return $this
     */
    public function setNoSetupFee($noSetupFee)
    {
        $this->container['noSetupFee'] = $noSetupFee;

        return $this;
    }

    /**
     * Gets trialPeriod
     *
     * @return string
     */
    public function getTrialPeriod()
    {
        return $this->container['trialPeriod'];
    }

    /**
     * Sets trialPeriod
     *
     * @param string $trialPeriod Optional custom trial period overriding the setting on the subscription plan. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations. E.g. `P7D` for seven days or `P1M` for one month.
     *
     * @return $this
     */
    public function setTrialPeriod($trialPeriod)
    {
        $this->container['trialPeriod'] = $trialPeriod;

        return $this;
    }

    /**
     * Gets subscriptionDiscounts
     *
     * @return \Reepay\Model\CreateSubscriptionDiscount[]
     */
    public function getSubscriptionDiscounts()
    {
        return $this->container['subscriptionDiscounts'];
    }

    /**
     * Sets subscriptionDiscounts
     *
     * @param \Reepay\Model\CreateSubscriptionDiscount[] $subscriptionDiscounts Discounts to attach to subscription
     *
     * @return $this
     */
    public function setSubscriptionDiscounts($subscriptionDiscounts)
    {
        $this->container['subscriptionDiscounts'] = $subscriptionDiscounts;

        return $this;
    }

    /**
     * Gets couponCodes
     *
     * @return string[]
     */
    public function getCouponCodes()
    {
        return $this->container['couponCodes'];
    }

    /**
     * Sets couponCodes
     *
     * @param string[] $couponCodes Coupon codes to redeem for subscription
     *
     * @return $this
     */
    public function setCouponCodes($couponCodes)
    {
        $this->container['couponCodes'] = $couponCodes;

        return $this;
    }

    /**
     * Gets addOns
     *
     * @return \Reepay\Model\CreateSubscriptionAddOn[]
     */
    public function getAddOns()
    {
        return $this->container['addOns'];
    }

    /**
     * Sets addOns
     *
     * @param \Reepay\Model\CreateSubscriptionAddOn[] $addOns Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.
     *
     * @return $this
     */
    public function setAddOns($addOns)
    {
        $this->container['addOns'] = $addOns;

        return $this;
    }

    /**
     * Gets additionalCosts
     *
     * @return \Reepay\Model\CreateSubscriptionAdditionalCost[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     *
     * @param \Reepay\Model\CreateSubscriptionAdditionalCost[] $additionalCosts Additional costs to add to subscription at creation time
     *
     * @return $this
     */
    public function setAdditionalCosts($additionalCosts)
    {
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets signupMethod
     *
     * @return string
     */
    public function getSignupMethod()
    {
        return $this->container['signupMethod'];
    }

    /**
     * Sets signupMethod
     *
     * @param string $signupMethod The signup method, how to get payment information from customer, one of the following: `source`, `email`, `link`. The `source` method takes a reference to an existing customer payment method (e.g. card `ca_..`) or a card token for `ct_...`. The method `email` will send an email to customer requesting payment information with a link to a hosted page. The method `link` does not do anything but the hosted page link in the subscription object can be provided to the customer as a link to enter payment information.
     *
     * @return $this
     */
    public function setSignupMethod($signupMethod)
    {
        $this->container['signupMethod'] = $signupMethod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


