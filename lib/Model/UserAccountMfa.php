<?php
/**
 * UserAccountMfa
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * UserAccountMfa Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserAccountMfa implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserAccountMfa';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'email' => 'string',
        'name' => 'string',
        'state' => 'string',
        'groups' => 'string[]',
        'permissions' => 'string[]',
        'verifiedEmail' => 'bool',
        'mfaMethod' => 'string',
        'inviteExpires' => '\DateTime',
        'totpQr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'email' => null,
        'name' => null,
        'state' => null,
        'groups' => null,
        'permissions' => null,
        'verifiedEmail' => null,
        'mfaMethod' => null,
        'inviteExpires' => 'date-time',
        'totpQr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'name' => 'name',
        'state' => 'state',
        'groups' => 'groups',
        'permissions' => 'permissions',
        'verifiedEmail' => 'verified_email',
        'mfaMethod' => 'mfa_method',
        'inviteExpires' => 'invite_expires',
        'totpQr' => 'totp_qr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'name' => 'setName',
        'state' => 'setState',
        'groups' => 'setGroups',
        'permissions' => 'setPermissions',
        'verifiedEmail' => 'setVerifiedEmail',
        'mfaMethod' => 'setMfaMethod',
        'inviteExpires' => 'setInviteExpires',
        'totpQr' => 'setTotpQr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'name' => 'getName',
        'state' => 'getState',
        'groups' => 'getGroups',
        'permissions' => 'getPermissions',
        'verifiedEmail' => 'getVerifiedEmail',
        'mfaMethod' => 'getMfaMethod',
        'inviteExpires' => 'getInviteExpires',
        'totpQr' => 'getTotpQr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_INVITED = 'invited';
    const MFA_METHOD_TOTP = 'totp';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INVITED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMfaMethodAllowableValues()
    {
        return [
            self::MFA_METHOD_TOTP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['verifiedEmail'] = isset($data['verifiedEmail']) ? $data['verifiedEmail'] : null;
        $this->container['mfaMethod'] = isset($data['mfaMethod']) ? $data['mfaMethod'] : null;
        $this->container['inviteExpires'] = isset($data['inviteExpires']) ? $data['inviteExpires'] : null;
        $this->container['totpQr'] = isset($data['totpQr']) ? $data['totpQr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        if ($this->container['permissions'] === null) {
            $invalidProperties[] = "'permissions' can't be null";
        }
        if ($this->container['verifiedEmail'] === null) {
            $invalidProperties[] = "'verifiedEmail' can't be null";
        }
        $allowedValues = $this->getMfaMethodAllowableValues();
        if (!is_null($this->container['mfaMethod']) && !in_array($this->container['mfaMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mfaMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['totpQr'] === null) {
            $invalidProperties[] = "'totpQr' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id for the user assigned by Reepay
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email User email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name User name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of user for account: `active`, `invited`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[] $groups List of user groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[] $permissions List of user permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets verifiedEmail
     *
     * @return bool
     */
    public function getVerifiedEmail()
    {
        return $this->container['verifiedEmail'];
    }

    /**
     * Sets verifiedEmail
     *
     * @param bool $verifiedEmail Email verified
     *
     * @return $this
     */
    public function setVerifiedEmail($verifiedEmail)
    {
        $this->container['verifiedEmail'] = $verifiedEmail;

        return $this;
    }

    /**
     * Gets mfaMethod
     *
     * @return string
     */
    public function getMfaMethod()
    {
        return $this->container['mfaMethod'];
    }

    /**
     * Sets mfaMethod
     *
     * @param string $mfaMethod MFA method
     *
     * @return $this
     */
    public function setMfaMethod($mfaMethod)
    {
        $allowedValues = $this->getMfaMethodAllowableValues();
        if (!is_null($mfaMethod) && !in_array($mfaMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mfaMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mfaMethod'] = $mfaMethod;

        return $this;
    }

    /**
     * Gets inviteExpires
     *
     * @return \DateTime
     */
    public function getInviteExpires()
    {
        return $this->container['inviteExpires'];
    }

    /**
     * Sets inviteExpires
     *
     * @param \DateTime $inviteExpires Expiry date for invite
     *
     * @return $this
     */
    public function setInviteExpires($inviteExpires)
    {
        $this->container['inviteExpires'] = $inviteExpires;

        return $this;
    }

    /**
     * Gets totpQr
     *
     * @return string
     */
    public function getTotpQr()
    {
        return $this->container['totpQr'];
    }

    /**
     * Sets totpQr
     *
     * @param string $totpQr TOTP QR code
     *
     * @return $this
     */
    public function setTotpQr($totpQr)
    {
        $this->container['totpQr'] = $totpQr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
