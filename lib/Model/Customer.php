<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'company' => 'string',
        'vat' => 'string',
        'handle' => 'string',
        'test' => 'bool',
        'subscriptions' => 'int',
        'created' => '\DateTime',
        'deleted' => '\DateTime',
        'firstName' => 'string',
        'lastName' => 'string',
        'postalCode' => 'string',
        'activeSubscriptions' => 'int',
        'trialActiveSubscriptions' => 'int',
        'trialCancelledSubscriptions' => 'int',
        'expiredSubscriptions' => 'int',
        'onHoldSubscriptions' => 'int',
        'cancelledSubscriptions' => 'int',
        'nonRenewingSubscriptions' => 'int',
        'failedInvoices' => 'int',
        'failedAmount' => 'int',
        'cancelledInvoices' => 'int',
        'cancelledAmount' => 'int',
        'pendingInvoices' => 'int',
        'pendingAmount' => 'int',
        'dunningInvoices' => 'int',
        'dunningAmount' => 'int',
        'settledInvoices' => 'int',
        'settledAmount' => 'int',
        'refundedAmount' => 'int',
        'pendingAdditionalCosts' => 'int',
        'pendingAdditionalCostAmount' => 'int',
        'transferredAdditionalCosts' => 'int',
        'transferredAdditionalCostAmount' => 'int',
        'pendingCredits' => 'int',
        'pendingCreditAmount' => 'int',
        'transferredCredits' => 'int',
        'transferredCreditAmount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
        'address' => null,
        'address2' => null,
        'city' => null,
        'country' => null,
        'phone' => null,
        'company' => null,
        'vat' => null,
        'handle' => null,
        'test' => null,
        'subscriptions' => 'int32',
        'created' => 'date-time',
        'deleted' => 'date-time',
        'firstName' => null,
        'lastName' => null,
        'postalCode' => null,
        'activeSubscriptions' => 'int32',
        'trialActiveSubscriptions' => 'int32',
        'trialCancelledSubscriptions' => 'int32',
        'expiredSubscriptions' => 'int32',
        'onHoldSubscriptions' => 'int32',
        'cancelledSubscriptions' => 'int32',
        'nonRenewingSubscriptions' => 'int32',
        'failedInvoices' => 'int32',
        'failedAmount' => 'int32',
        'cancelledInvoices' => 'int32',
        'cancelledAmount' => 'int32',
        'pendingInvoices' => 'int32',
        'pendingAmount' => 'int32',
        'dunningInvoices' => 'int32',
        'dunningAmount' => 'int32',
        'settledInvoices' => 'int32',
        'settledAmount' => 'int32',
        'refundedAmount' => 'int32',
        'pendingAdditionalCosts' => 'int32',
        'pendingAdditionalCostAmount' => 'int32',
        'transferredAdditionalCosts' => 'int32',
        'transferredAdditionalCostAmount' => 'int32',
        'pendingCredits' => 'int32',
        'pendingCreditAmount' => 'int32',
        'transferredCredits' => 'int32',
        'transferredCreditAmount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'country' => 'country',
        'phone' => 'phone',
        'company' => 'company',
        'vat' => 'vat',
        'handle' => 'handle',
        'test' => 'test',
        'subscriptions' => 'subscriptions',
        'created' => 'created',
        'deleted' => 'deleted',
        'firstName' => 'first_name',
        'lastName' => 'last_name',
        'postalCode' => 'postal_code',
        'activeSubscriptions' => 'active_subscriptions',
        'trialActiveSubscriptions' => 'trial_active_subscriptions',
        'trialCancelledSubscriptions' => 'trial_cancelled_subscriptions',
        'expiredSubscriptions' => 'expired_subscriptions',
        'onHoldSubscriptions' => 'on_hold_subscriptions',
        'cancelledSubscriptions' => 'cancelled_subscriptions',
        'nonRenewingSubscriptions' => 'non_renewing_subscriptions',
        'failedInvoices' => 'failed_invoices',
        'failedAmount' => 'failed_amount',
        'cancelledInvoices' => 'cancelled_invoices',
        'cancelledAmount' => 'cancelled_amount',
        'pendingInvoices' => 'pending_invoices',
        'pendingAmount' => 'pending_amount',
        'dunningInvoices' => 'dunning_invoices',
        'dunningAmount' => 'dunning_amount',
        'settledInvoices' => 'settled_invoices',
        'settledAmount' => 'settled_amount',
        'refundedAmount' => 'refunded_amount',
        'pendingAdditionalCosts' => 'pending_additional_costs',
        'pendingAdditionalCostAmount' => 'pending_additional_cost_amount',
        'transferredAdditionalCosts' => 'transferred_additional_costs',
        'transferredAdditionalCostAmount' => 'transferred_additional_cost_amount',
        'pendingCredits' => 'pending_credits',
        'pendingCreditAmount' => 'pending_credit_amount',
        'transferredCredits' => 'transferred_credits',
        'transferredCreditAmount' => 'transferred_credit_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'company' => 'setCompany',
        'vat' => 'setVat',
        'handle' => 'setHandle',
        'test' => 'setTest',
        'subscriptions' => 'setSubscriptions',
        'created' => 'setCreated',
        'deleted' => 'setDeleted',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'postalCode' => 'setPostalCode',
        'activeSubscriptions' => 'setActiveSubscriptions',
        'trialActiveSubscriptions' => 'setTrialActiveSubscriptions',
        'trialCancelledSubscriptions' => 'setTrialCancelledSubscriptions',
        'expiredSubscriptions' => 'setExpiredSubscriptions',
        'onHoldSubscriptions' => 'setOnHoldSubscriptions',
        'cancelledSubscriptions' => 'setCancelledSubscriptions',
        'nonRenewingSubscriptions' => 'setNonRenewingSubscriptions',
        'failedInvoices' => 'setFailedInvoices',
        'failedAmount' => 'setFailedAmount',
        'cancelledInvoices' => 'setCancelledInvoices',
        'cancelledAmount' => 'setCancelledAmount',
        'pendingInvoices' => 'setPendingInvoices',
        'pendingAmount' => 'setPendingAmount',
        'dunningInvoices' => 'setDunningInvoices',
        'dunningAmount' => 'setDunningAmount',
        'settledInvoices' => 'setSettledInvoices',
        'settledAmount' => 'setSettledAmount',
        'refundedAmount' => 'setRefundedAmount',
        'pendingAdditionalCosts' => 'setPendingAdditionalCosts',
        'pendingAdditionalCostAmount' => 'setPendingAdditionalCostAmount',
        'transferredAdditionalCosts' => 'setTransferredAdditionalCosts',
        'transferredAdditionalCostAmount' => 'setTransferredAdditionalCostAmount',
        'pendingCredits' => 'setPendingCredits',
        'pendingCreditAmount' => 'setPendingCreditAmount',
        'transferredCredits' => 'setTransferredCredits',
        'transferredCreditAmount' => 'setTransferredCreditAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'company' => 'getCompany',
        'vat' => 'getVat',
        'handle' => 'getHandle',
        'test' => 'getTest',
        'subscriptions' => 'getSubscriptions',
        'created' => 'getCreated',
        'deleted' => 'getDeleted',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'postalCode' => 'getPostalCode',
        'activeSubscriptions' => 'getActiveSubscriptions',
        'trialActiveSubscriptions' => 'getTrialActiveSubscriptions',
        'trialCancelledSubscriptions' => 'getTrialCancelledSubscriptions',
        'expiredSubscriptions' => 'getExpiredSubscriptions',
        'onHoldSubscriptions' => 'getOnHoldSubscriptions',
        'cancelledSubscriptions' => 'getCancelledSubscriptions',
        'nonRenewingSubscriptions' => 'getNonRenewingSubscriptions',
        'failedInvoices' => 'getFailedInvoices',
        'failedAmount' => 'getFailedAmount',
        'cancelledInvoices' => 'getCancelledInvoices',
        'cancelledAmount' => 'getCancelledAmount',
        'pendingInvoices' => 'getPendingInvoices',
        'pendingAmount' => 'getPendingAmount',
        'dunningInvoices' => 'getDunningInvoices',
        'dunningAmount' => 'getDunningAmount',
        'settledInvoices' => 'getSettledInvoices',
        'settledAmount' => 'getSettledAmount',
        'refundedAmount' => 'getRefundedAmount',
        'pendingAdditionalCosts' => 'getPendingAdditionalCosts',
        'pendingAdditionalCostAmount' => 'getPendingAdditionalCostAmount',
        'transferredAdditionalCosts' => 'getTransferredAdditionalCosts',
        'transferredAdditionalCostAmount' => 'getTransferredAdditionalCostAmount',
        'pendingCredits' => 'getPendingCredits',
        'pendingCreditAmount' => 'getPendingCreditAmount',
        'transferredCredits' => 'getTransferredCredits',
        'transferredCreditAmount' => 'getTransferredCreditAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['activeSubscriptions'] = isset($data['activeSubscriptions']) ? $data['activeSubscriptions'] : null;
        $this->container['trialActiveSubscriptions'] = isset($data['trialActiveSubscriptions']) ? $data['trialActiveSubscriptions'] : null;
        $this->container['trialCancelledSubscriptions'] = isset($data['trialCancelledSubscriptions']) ? $data['trialCancelledSubscriptions'] : null;
        $this->container['expiredSubscriptions'] = isset($data['expiredSubscriptions']) ? $data['expiredSubscriptions'] : null;
        $this->container['onHoldSubscriptions'] = isset($data['onHoldSubscriptions']) ? $data['onHoldSubscriptions'] : null;
        $this->container['cancelledSubscriptions'] = isset($data['cancelledSubscriptions']) ? $data['cancelledSubscriptions'] : null;
        $this->container['nonRenewingSubscriptions'] = isset($data['nonRenewingSubscriptions']) ? $data['nonRenewingSubscriptions'] : null;
        $this->container['failedInvoices'] = isset($data['failedInvoices']) ? $data['failedInvoices'] : null;
        $this->container['failedAmount'] = isset($data['failedAmount']) ? $data['failedAmount'] : null;
        $this->container['cancelledInvoices'] = isset($data['cancelledInvoices']) ? $data['cancelledInvoices'] : null;
        $this->container['cancelledAmount'] = isset($data['cancelledAmount']) ? $data['cancelledAmount'] : null;
        $this->container['pendingInvoices'] = isset($data['pendingInvoices']) ? $data['pendingInvoices'] : null;
        $this->container['pendingAmount'] = isset($data['pendingAmount']) ? $data['pendingAmount'] : null;
        $this->container['dunningInvoices'] = isset($data['dunningInvoices']) ? $data['dunningInvoices'] : null;
        $this->container['dunningAmount'] = isset($data['dunningAmount']) ? $data['dunningAmount'] : null;
        $this->container['settledInvoices'] = isset($data['settledInvoices']) ? $data['settledInvoices'] : null;
        $this->container['settledAmount'] = isset($data['settledAmount']) ? $data['settledAmount'] : null;
        $this->container['refundedAmount'] = isset($data['refundedAmount']) ? $data['refundedAmount'] : null;
        $this->container['pendingAdditionalCosts'] = isset($data['pendingAdditionalCosts']) ? $data['pendingAdditionalCosts'] : null;
        $this->container['pendingAdditionalCostAmount'] = isset($data['pendingAdditionalCostAmount']) ? $data['pendingAdditionalCostAmount'] : null;
        $this->container['transferredAdditionalCosts'] = isset($data['transferredAdditionalCosts']) ? $data['transferredAdditionalCosts'] : null;
        $this->container['transferredAdditionalCostAmount'] = isset($data['transferredAdditionalCostAmount']) ? $data['transferredAdditionalCostAmount'] : null;
        $this->container['pendingCredits'] = isset($data['pendingCredits']) ? $data['pendingCredits'] : null;
        $this->container['pendingCreditAmount'] = isset($data['pendingCreditAmount']) ? $data['pendingCreditAmount'] : null;
        $this->container['transferredCredits'] = isset($data['transferredCredits']) ? $data['transferredCredits'] : null;
        $this->container['transferredCreditAmount'] = isset($data['transferredCreditAmount']) ? $data['transferredCreditAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['subscriptions'] === null) {
            $invalidProperties[] = "'subscriptions' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['activeSubscriptions'] === null) {
            $invalidProperties[] = "'activeSubscriptions' can't be null";
        }
        if ($this->container['trialActiveSubscriptions'] === null) {
            $invalidProperties[] = "'trialActiveSubscriptions' can't be null";
        }
        if ($this->container['trialCancelledSubscriptions'] === null) {
            $invalidProperties[] = "'trialCancelledSubscriptions' can't be null";
        }
        if ($this->container['expiredSubscriptions'] === null) {
            $invalidProperties[] = "'expiredSubscriptions' can't be null";
        }
        if ($this->container['onHoldSubscriptions'] === null) {
            $invalidProperties[] = "'onHoldSubscriptions' can't be null";
        }
        if ($this->container['cancelledSubscriptions'] === null) {
            $invalidProperties[] = "'cancelledSubscriptions' can't be null";
        }
        if ($this->container['nonRenewingSubscriptions'] === null) {
            $invalidProperties[] = "'nonRenewingSubscriptions' can't be null";
        }
        if ($this->container['failedInvoices'] === null) {
            $invalidProperties[] = "'failedInvoices' can't be null";
        }
        if ($this->container['failedAmount'] === null) {
            $invalidProperties[] = "'failedAmount' can't be null";
        }
        if ($this->container['cancelledInvoices'] === null) {
            $invalidProperties[] = "'cancelledInvoices' can't be null";
        }
        if ($this->container['cancelledAmount'] === null) {
            $invalidProperties[] = "'cancelledAmount' can't be null";
        }
        if ($this->container['pendingInvoices'] === null) {
            $invalidProperties[] = "'pendingInvoices' can't be null";
        }
        if ($this->container['pendingAmount'] === null) {
            $invalidProperties[] = "'pendingAmount' can't be null";
        }
        if ($this->container['dunningInvoices'] === null) {
            $invalidProperties[] = "'dunningInvoices' can't be null";
        }
        if ($this->container['dunningAmount'] === null) {
            $invalidProperties[] = "'dunningAmount' can't be null";
        }
        if ($this->container['settledInvoices'] === null) {
            $invalidProperties[] = "'settledInvoices' can't be null";
        }
        if ($this->container['settledAmount'] === null) {
            $invalidProperties[] = "'settledAmount' can't be null";
        }
        if ($this->container['refundedAmount'] === null) {
            $invalidProperties[] = "'refundedAmount' can't be null";
        }
        if ($this->container['pendingAdditionalCosts'] === null) {
            $invalidProperties[] = "'pendingAdditionalCosts' can't be null";
        }
        if ($this->container['pendingAdditionalCostAmount'] === null) {
            $invalidProperties[] = "'pendingAdditionalCostAmount' can't be null";
        }
        if ($this->container['transferredAdditionalCosts'] === null) {
            $invalidProperties[] = "'transferredAdditionalCosts' can't be null";
        }
        if ($this->container['transferredAdditionalCostAmount'] === null) {
            $invalidProperties[] = "'transferredAdditionalCostAmount' can't be null";
        }
        if ($this->container['pendingCredits'] === null) {
            $invalidProperties[] = "'pendingCredits' can't be null";
        }
        if ($this->container['pendingCreditAmount'] === null) {
            $invalidProperties[] = "'pendingCreditAmount' can't be null";
        }
        if ($this->container['transferredCredits'] === null) {
            $invalidProperties[] = "'transferredCredits' can't be null";
        }
        if ($this->container['transferredCreditAmount'] === null) {
            $invalidProperties[] = "'transferredCreditAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Customer email. Validated against RFC 822.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Customer address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 Customer address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Customer city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Customer country in ISO 3166-1 alpha-2
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Customer phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Customer company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat Customer vat number
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Test flag
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return int
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param int $subscriptions Number of active subscriptions for this customer (deprecated, will be removed in a later version, use active_subscriptions)
     *
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the customer was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return \DateTime
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param \DateTime $deleted Date when the customer was deleted. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName Customer first name
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Customer last name
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode Customer postal code
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets activeSubscriptions
     *
     * @return int
     */
    public function getActiveSubscriptions()
    {
        return $this->container['activeSubscriptions'];
    }

    /**
     * Sets activeSubscriptions
     *
     * @param int $activeSubscriptions Number of active subscriptions for this customer
     *
     * @return $this
     */
    public function setActiveSubscriptions($activeSubscriptions)
    {
        $this->container['activeSubscriptions'] = $activeSubscriptions;

        return $this;
    }

    /**
     * Gets trialActiveSubscriptions
     *
     * @return int
     */
    public function getTrialActiveSubscriptions()
    {
        return $this->container['trialActiveSubscriptions'];
    }

    /**
     * Sets trialActiveSubscriptions
     *
     * @param int $trialActiveSubscriptions Number of active subscriptions in trial for this customer. Also counts subscription to enter trial at a future start date.
     *
     * @return $this
     */
    public function setTrialActiveSubscriptions($trialActiveSubscriptions)
    {
        $this->container['trialActiveSubscriptions'] = $trialActiveSubscriptions;

        return $this;
    }

    /**
     * Gets trialCancelledSubscriptions
     *
     * @return int
     */
    public function getTrialCancelledSubscriptions()
    {
        return $this->container['trialCancelledSubscriptions'];
    }

    /**
     * Sets trialCancelledSubscriptions
     *
     * @param int $trialCancelledSubscriptions Number of cancelled subscriptions in trial for this customer
     *
     * @return $this
     */
    public function setTrialCancelledSubscriptions($trialCancelledSubscriptions)
    {
        $this->container['trialCancelledSubscriptions'] = $trialCancelledSubscriptions;

        return $this;
    }

    /**
     * Gets expiredSubscriptions
     *
     * @return int
     */
    public function getExpiredSubscriptions()
    {
        return $this->container['expiredSubscriptions'];
    }

    /**
     * Sets expiredSubscriptions
     *
     * @param int $expiredSubscriptions Number of expired subscription for this customer
     *
     * @return $this
     */
    public function setExpiredSubscriptions($expiredSubscriptions)
    {
        $this->container['expiredSubscriptions'] = $expiredSubscriptions;

        return $this;
    }

    /**
     * Gets onHoldSubscriptions
     *
     * @return int
     */
    public function getOnHoldSubscriptions()
    {
        return $this->container['onHoldSubscriptions'];
    }

    /**
     * Sets onHoldSubscriptions
     *
     * @param int $onHoldSubscriptions Number of subscription on hold for this customer
     *
     * @return $this
     */
    public function setOnHoldSubscriptions($onHoldSubscriptions)
    {
        $this->container['onHoldSubscriptions'] = $onHoldSubscriptions;

        return $this;
    }

    /**
     * Gets cancelledSubscriptions
     *
     * @return int
     */
    public function getCancelledSubscriptions()
    {
        return $this->container['cancelledSubscriptions'];
    }

    /**
     * Sets cancelledSubscriptions
     *
     * @param int $cancelledSubscriptions Number of cancelled subscription for this customer
     *
     * @return $this
     */
    public function setCancelledSubscriptions($cancelledSubscriptions)
    {
        $this->container['cancelledSubscriptions'] = $cancelledSubscriptions;

        return $this;
    }

    /**
     * Gets nonRenewingSubscriptions
     *
     * @return int
     */
    public function getNonRenewingSubscriptions()
    {
        return $this->container['nonRenewingSubscriptions'];
    }

    /**
     * Sets nonRenewingSubscriptions
     *
     * @param int $nonRenewingSubscriptions Number of non renewing (active subscriptions not renewing at billing period end) subscriptions for this customer
     *
     * @return $this
     */
    public function setNonRenewingSubscriptions($nonRenewingSubscriptions)
    {
        $this->container['nonRenewingSubscriptions'] = $nonRenewingSubscriptions;

        return $this;
    }

    /**
     * Gets failedInvoices
     *
     * @return int
     */
    public function getFailedInvoices()
    {
        return $this->container['failedInvoices'];
    }

    /**
     * Sets failedInvoices
     *
     * @param int $failedInvoices Number of failed subscription invoices for this customer
     *
     * @return $this
     */
    public function setFailedInvoices($failedInvoices)
    {
        $this->container['failedInvoices'] = $failedInvoices;

        return $this;
    }

    /**
     * Gets failedAmount
     *
     * @return int
     */
    public function getFailedAmount()
    {
        return $this->container['failedAmount'];
    }

    /**
     * Sets failedAmount
     *
     * @param int $failedAmount Summed amount for failed subscription invoices
     *
     * @return $this
     */
    public function setFailedAmount($failedAmount)
    {
        $this->container['failedAmount'] = $failedAmount;

        return $this;
    }

    /**
     * Gets cancelledInvoices
     *
     * @return int
     */
    public function getCancelledInvoices()
    {
        return $this->container['cancelledInvoices'];
    }

    /**
     * Sets cancelledInvoices
     *
     * @param int $cancelledInvoices Number of cancelled subscription invoices for this customer
     *
     * @return $this
     */
    public function setCancelledInvoices($cancelledInvoices)
    {
        $this->container['cancelledInvoices'] = $cancelledInvoices;

        return $this;
    }

    /**
     * Gets cancelledAmount
     *
     * @return int
     */
    public function getCancelledAmount()
    {
        return $this->container['cancelledAmount'];
    }

    /**
     * Sets cancelledAmount
     *
     * @param int $cancelledAmount Summed amount for cancelled subscription invoices
     *
     * @return $this
     */
    public function setCancelledAmount($cancelledAmount)
    {
        $this->container['cancelledAmount'] = $cancelledAmount;

        return $this;
    }

    /**
     * Gets pendingInvoices
     *
     * @return int
     */
    public function getPendingInvoices()
    {
        return $this->container['pendingInvoices'];
    }

    /**
     * Sets pendingInvoices
     *
     * @param int $pendingInvoices Number of pending subscription invoices for this customer
     *
     * @return $this
     */
    public function setPendingInvoices($pendingInvoices)
    {
        $this->container['pendingInvoices'] = $pendingInvoices;

        return $this;
    }

    /**
     * Gets pendingAmount
     *
     * @return int
     */
    public function getPendingAmount()
    {
        return $this->container['pendingAmount'];
    }

    /**
     * Sets pendingAmount
     *
     * @param int $pendingAmount Summed amount for pending subscription invoices
     *
     * @return $this
     */
    public function setPendingAmount($pendingAmount)
    {
        $this->container['pendingAmount'] = $pendingAmount;

        return $this;
    }

    /**
     * Gets dunningInvoices
     *
     * @return int
     */
    public function getDunningInvoices()
    {
        return $this->container['dunningInvoices'];
    }

    /**
     * Sets dunningInvoices
     *
     * @param int $dunningInvoices Number of dunning subscription invoices for this customer
     *
     * @return $this
     */
    public function setDunningInvoices($dunningInvoices)
    {
        $this->container['dunningInvoices'] = $dunningInvoices;

        return $this;
    }

    /**
     * Gets dunningAmount
     *
     * @return int
     */
    public function getDunningAmount()
    {
        return $this->container['dunningAmount'];
    }

    /**
     * Sets dunningAmount
     *
     * @param int $dunningAmount Summed amount for dunning subscription invoices
     *
     * @return $this
     */
    public function setDunningAmount($dunningAmount)
    {
        $this->container['dunningAmount'] = $dunningAmount;

        return $this;
    }

    /**
     * Gets settledInvoices
     *
     * @return int
     */
    public function getSettledInvoices()
    {
        return $this->container['settledInvoices'];
    }

    /**
     * Sets settledInvoices
     *
     * @param int $settledInvoices Number of settled subscription invoices for this customer
     *
     * @return $this
     */
    public function setSettledInvoices($settledInvoices)
    {
        $this->container['settledInvoices'] = $settledInvoices;

        return $this;
    }

    /**
     * Gets settledAmount
     *
     * @return int
     */
    public function getSettledAmount()
    {
        return $this->container['settledAmount'];
    }

    /**
     * Sets settledAmount
     *
     * @param int $settledAmount Summed settled subscription amount
     *
     * @return $this
     */
    public function setSettledAmount($settledAmount)
    {
        $this->container['settledAmount'] = $settledAmount;

        return $this;
    }

    /**
     * Gets refundedAmount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refundedAmount'];
    }

    /**
     * Sets refundedAmount
     *
     * @param int $refundedAmount Summed refunded subscription amount
     *
     * @return $this
     */
    public function setRefundedAmount($refundedAmount)
    {
        $this->container['refundedAmount'] = $refundedAmount;

        return $this;
    }

    /**
     * Gets pendingAdditionalCosts
     *
     * @return int
     */
    public function getPendingAdditionalCosts()
    {
        return $this->container['pendingAdditionalCosts'];
    }

    /**
     * Sets pendingAdditionalCosts
     *
     * @param int $pendingAdditionalCosts Number of pending additional costs
     *
     * @return $this
     */
    public function setPendingAdditionalCosts($pendingAdditionalCosts)
    {
        $this->container['pendingAdditionalCosts'] = $pendingAdditionalCosts;

        return $this;
    }

    /**
     * Gets pendingAdditionalCostAmount
     *
     * @return int
     */
    public function getPendingAdditionalCostAmount()
    {
        return $this->container['pendingAdditionalCostAmount'];
    }

    /**
     * Sets pendingAdditionalCostAmount
     *
     * @param int $pendingAdditionalCostAmount Summed amount of pending additional costs incl vat
     *
     * @return $this
     */
    public function setPendingAdditionalCostAmount($pendingAdditionalCostAmount)
    {
        $this->container['pendingAdditionalCostAmount'] = $pendingAdditionalCostAmount;

        return $this;
    }

    /**
     * Gets transferredAdditionalCosts
     *
     * @return int
     */
    public function getTransferredAdditionalCosts()
    {
        return $this->container['transferredAdditionalCosts'];
    }

    /**
     * Sets transferredAdditionalCosts
     *
     * @param int $transferredAdditionalCosts Number of additional costs that have been applied to invoices
     *
     * @return $this
     */
    public function setTransferredAdditionalCosts($transferredAdditionalCosts)
    {
        $this->container['transferredAdditionalCosts'] = $transferredAdditionalCosts;

        return $this;
    }

    /**
     * Gets transferredAdditionalCostAmount
     *
     * @return int
     */
    public function getTransferredAdditionalCostAmount()
    {
        return $this->container['transferredAdditionalCostAmount'];
    }

    /**
     * Sets transferredAdditionalCostAmount
     *
     * @param int $transferredAdditionalCostAmount Summed amount of additional costs that have been applied to invoices
     *
     * @return $this
     */
    public function setTransferredAdditionalCostAmount($transferredAdditionalCostAmount)
    {
        $this->container['transferredAdditionalCostAmount'] = $transferredAdditionalCostAmount;

        return $this;
    }

    /**
     * Gets pendingCredits
     *
     * @return int
     */
    public function getPendingCredits()
    {
        return $this->container['pendingCredits'];
    }

    /**
     * Sets pendingCredits
     *
     * @param int $pendingCredits Number of credits that have not fully been applied to invoices
     *
     * @return $this
     */
    public function setPendingCredits($pendingCredits)
    {
        $this->container['pendingCredits'] = $pendingCredits;

        return $this;
    }

    /**
     * Gets pendingCreditAmount
     *
     * @return int
     */
    public function getPendingCreditAmount()
    {
        return $this->container['pendingCreditAmount'];
    }

    /**
     * Sets pendingCreditAmount
     *
     * @param int $pendingCreditAmount Summed credit amount not yet applied to invoices
     *
     * @return $this
     */
    public function setPendingCreditAmount($pendingCreditAmount)
    {
        $this->container['pendingCreditAmount'] = $pendingCreditAmount;

        return $this;
    }

    /**
     * Gets transferredCredits
     *
     * @return int
     */
    public function getTransferredCredits()
    {
        return $this->container['transferredCredits'];
    }

    /**
     * Sets transferredCredits
     *
     * @param int $transferredCredits Number of credits that have fully been applied to invoices
     *
     * @return $this
     */
    public function setTransferredCredits($transferredCredits)
    {
        $this->container['transferredCredits'] = $transferredCredits;

        return $this;
    }

    /**
     * Gets transferredCreditAmount
     *
     * @return int
     */
    public function getTransferredCreditAmount()
    {
        return $this->container['transferredCreditAmount'];
    }

    /**
     * Sets transferredCreditAmount
     *
     * @param int $transferredCreditAmount Summed credit amount that have been applied to invoices
     *
     * @return $this
     */
    public function setTransferredCreditAmount($transferredCreditAmount)
    {
        $this->container['transferredCreditAmount'] = $transferredCreditAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


