<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'state' => 'string',
        'customer' => 'string',
        'reference' => 'string',
        'failed' => '\DateTime',
        'created' => '\DateTime',
        'fingerprint' => 'string',
        'reactivated' => '\DateTime',
        'gwRef' => 'string',
        'cardType' => 'string',
        'transactionCardType' => 'string',
        'expDate' => 'string',
        'maskedCard' => 'string',
        'lastSuccess' => '\DateTime',
        'lastFailed' => '\DateTime',
        'firstFail' => '\DateTime',
        'errorCode' => 'string',
        'errorState' => 'string',
        'strongAuthenticationStatus' => 'string',
        'threeDSecureStatus' => 'string',
        'riskRule' => 'string',
        'cardCountry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'state' => null,
        'customer' => null,
        'reference' => null,
        'failed' => 'date-time',
        'created' => 'date-time',
        'fingerprint' => null,
        'reactivated' => 'date-time',
        'gwRef' => null,
        'cardType' => null,
        'transactionCardType' => null,
        'expDate' => null,
        'maskedCard' => null,
        'lastSuccess' => 'date-time',
        'lastFailed' => 'date-time',
        'firstFail' => 'date-time',
        'errorCode' => null,
        'errorState' => null,
        'strongAuthenticationStatus' => null,
        'threeDSecureStatus' => null,
        'riskRule' => null,
        'cardCountry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'customer' => 'customer',
        'reference' => 'reference',
        'failed' => 'failed',
        'created' => 'created',
        'fingerprint' => 'fingerprint',
        'reactivated' => 'reactivated',
        'gwRef' => 'gw_ref',
        'cardType' => 'card_type',
        'transactionCardType' => 'transaction_card_type',
        'expDate' => 'exp_date',
        'maskedCard' => 'masked_card',
        'lastSuccess' => 'last_success',
        'lastFailed' => 'last_failed',
        'firstFail' => 'first_fail',
        'errorCode' => 'error_code',
        'errorState' => 'error_state',
        'strongAuthenticationStatus' => 'strong_authentication_status',
        'threeDSecureStatus' => 'three_d_secure_status',
        'riskRule' => 'risk_rule',
        'cardCountry' => 'card_country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'customer' => 'setCustomer',
        'reference' => 'setReference',
        'failed' => 'setFailed',
        'created' => 'setCreated',
        'fingerprint' => 'setFingerprint',
        'reactivated' => 'setReactivated',
        'gwRef' => 'setGwRef',
        'cardType' => 'setCardType',
        'transactionCardType' => 'setTransactionCardType',
        'expDate' => 'setExpDate',
        'maskedCard' => 'setMaskedCard',
        'lastSuccess' => 'setLastSuccess',
        'lastFailed' => 'setLastFailed',
        'firstFail' => 'setFirstFail',
        'errorCode' => 'setErrorCode',
        'errorState' => 'setErrorState',
        'strongAuthenticationStatus' => 'setStrongAuthenticationStatus',
        'threeDSecureStatus' => 'setThreeDSecureStatus',
        'riskRule' => 'setRiskRule',
        'cardCountry' => 'setCardCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'customer' => 'getCustomer',
        'reference' => 'getReference',
        'failed' => 'getFailed',
        'created' => 'getCreated',
        'fingerprint' => 'getFingerprint',
        'reactivated' => 'getReactivated',
        'gwRef' => 'getGwRef',
        'cardType' => 'getCardType',
        'transactionCardType' => 'getTransactionCardType',
        'expDate' => 'getExpDate',
        'maskedCard' => 'getMaskedCard',
        'lastSuccess' => 'getLastSuccess',
        'lastFailed' => 'getLastFailed',
        'firstFail' => 'getFirstFail',
        'errorCode' => 'getErrorCode',
        'errorState' => 'getErrorState',
        'strongAuthenticationStatus' => 'getStrongAuthenticationStatus',
        'threeDSecureStatus' => 'getThreeDSecureStatus',
        'riskRule' => 'getRiskRule',
        'cardCountry' => 'getCardCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_INACTIVATED = 'inactivated';
    const STATE_FAILED = 'failed';
    const STATE_PENDING = 'pending';
    const STATE_DELETED = 'deleted';
    const CARD_TYPE_UNKNOWN = 'unknown';
    const CARD_TYPE_VISA = 'visa';
    const CARD_TYPE_MC = 'mc';
    const CARD_TYPE_DANKORT = 'dankort';
    const CARD_TYPE_VISA_DK = 'visa_dk';
    const CARD_TYPE_FFK = 'ffk';
    const CARD_TYPE_VISA_ELEC = 'visa_elec';
    const CARD_TYPE_MAESTRO = 'maestro';
    const CARD_TYPE_LASER = 'laser';
    const CARD_TYPE_AMEX = 'amex';
    const CARD_TYPE_DINERS = 'diners';
    const CARD_TYPE_DISCOVER = 'discover';
    const CARD_TYPE_JCB = 'jcb';
    const TRANSACTION_CARD_TYPE_UNKNOWN = 'unknown';
    const TRANSACTION_CARD_TYPE_VISA = 'visa';
    const TRANSACTION_CARD_TYPE_MC = 'mc';
    const TRANSACTION_CARD_TYPE_DANKORT = 'dankort';
    const TRANSACTION_CARD_TYPE_VISA_DK = 'visa_dk';
    const TRANSACTION_CARD_TYPE_FFK = 'ffk';
    const TRANSACTION_CARD_TYPE_VISA_ELEC = 'visa_elec';
    const TRANSACTION_CARD_TYPE_MAESTRO = 'maestro';
    const TRANSACTION_CARD_TYPE_LASER = 'laser';
    const TRANSACTION_CARD_TYPE_AMEX = 'amex';
    const TRANSACTION_CARD_TYPE_DINERS = 'diners';
    const TRANSACTION_CARD_TYPE_DISCOVER = 'discover';
    const TRANSACTION_CARD_TYPE_JCB = 'jcb';
    const ERROR_STATE_PENDING = 'pending';
    const ERROR_STATE_SOFT_DECLINED = 'soft_declined';
    const ERROR_STATE_HARD_DECLINED = 'hard_declined';
    const ERROR_STATE_PROCESSING_ERROR = 'processing_error';
    const STRONG_AUTHENTICATION_STATUS_THREED_SECURE = 'threed_secure';
    const STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED = 'threed_secure_not_enrolled';
    const STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS = 'secured_by_nets';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INACTIVATED,
            self::STATE_FAILED,
            self::STATE_PENDING,
            self::STATE_DELETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCardTypeAllowableValues()
    {
        return [
            self::TRANSACTION_CARD_TYPE_UNKNOWN,
            self::TRANSACTION_CARD_TYPE_VISA,
            self::TRANSACTION_CARD_TYPE_MC,
            self::TRANSACTION_CARD_TYPE_DANKORT,
            self::TRANSACTION_CARD_TYPE_VISA_DK,
            self::TRANSACTION_CARD_TYPE_FFK,
            self::TRANSACTION_CARD_TYPE_VISA_ELEC,
            self::TRANSACTION_CARD_TYPE_MAESTRO,
            self::TRANSACTION_CARD_TYPE_LASER,
            self::TRANSACTION_CARD_TYPE_AMEX,
            self::TRANSACTION_CARD_TYPE_DINERS,
            self::TRANSACTION_CARD_TYPE_DISCOVER,
            self::TRANSACTION_CARD_TYPE_JCB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorStateAllowableValues()
    {
        return [
            self::ERROR_STATE_PENDING,
            self::ERROR_STATE_SOFT_DECLINED,
            self::ERROR_STATE_HARD_DECLINED,
            self::ERROR_STATE_PROCESSING_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrongAuthenticationStatusAllowableValues()
    {
        return [
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE,
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED,
            self::STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['reactivated'] = isset($data['reactivated']) ? $data['reactivated'] : null;
        $this->container['gwRef'] = isset($data['gwRef']) ? $data['gwRef'] : null;
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
        $this->container['transactionCardType'] = isset($data['transactionCardType']) ? $data['transactionCardType'] : null;
        $this->container['expDate'] = isset($data['expDate']) ? $data['expDate'] : null;
        $this->container['maskedCard'] = isset($data['maskedCard']) ? $data['maskedCard'] : null;
        $this->container['lastSuccess'] = isset($data['lastSuccess']) ? $data['lastSuccess'] : null;
        $this->container['lastFailed'] = isset($data['lastFailed']) ? $data['lastFailed'] : null;
        $this->container['firstFail'] = isset($data['firstFail']) ? $data['firstFail'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['errorState'] = isset($data['errorState']) ? $data['errorState'] : null;
        $this->container['strongAuthenticationStatus'] = isset($data['strongAuthenticationStatus']) ? $data['strongAuthenticationStatus'] : null;
        $this->container['threeDSecureStatus'] = isset($data['threeDSecureStatus']) ? $data['threeDSecureStatus'] : null;
        $this->container['riskRule'] = isset($data['riskRule']) ? $data['riskRule'] : null;
        $this->container['cardCountry'] = isset($data['cardCountry']) ? $data['cardCountry'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['gwRef'] === null) {
            $invalidProperties[] = "'gwRef' can't be null";
        }
        if ($this->container['cardType'] === null) {
            $invalidProperties[] = "'cardType' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['cardType']) && !in_array($this->container['cardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cardType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($this->container['transactionCardType']) && !in_array($this->container['transactionCardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transactionCardType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($this->container['errorState']) && !in_array($this->container['errorState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'errorState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($this->container['strongAuthenticationStatus']) && !in_array($this->container['strongAuthenticationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'strongAuthenticationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id for payment method
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the payment method: `active`, `inactivated`, `failed`, `pending` or `deleted`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer by handle
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Optional reference provided when creating the payment method. For payment methods created with Reepay Checkout the reference will correspond to the session id for the Checkout session that created the payment method.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime $failed Date when the payment method failed. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the payment method was created. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint Uniquely identifies this particular card number
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets reactivated
     *
     * @return \DateTime
     */
    public function getReactivated()
    {
        return $this->container['reactivated'];
    }

    /**
     * Sets reactivated
     *
     * @param \DateTime $reactivated Date and time of reactivation if the card has been reactivated from failed state. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setReactivated($reactivated)
    {
        $this->container['reactivated'] = $reactivated;

        return $this;
    }

    /**
     * Gets gwRef
     *
     * @return string
     */
    public function getGwRef()
    {
        return $this->container['gwRef'];
    }

    /**
     * Sets gwRef
     *
     * @param string $gwRef Card gateway reference id
     *
     * @return $this
     */
    public function setGwRef($gwRef)
    {
        $this->container['gwRef'] = $gwRef;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string $cardType Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`
     *
     * @return $this
     */
    public function setCardType($cardType)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($cardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cardType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets transactionCardType
     *
     * @return string
     */
    public function getTransactionCardType()
    {
        return $this->container['transactionCardType'];
    }

    /**
     * Sets transactionCardType
     *
     * @param string $transactionCardType Card type used in authentication and the card type used for subsequent MIT transactions. Will differ from `card_type` if co-branded card. `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`
     *
     * @return $this
     */
    public function setTransactionCardType($transactionCardType)
    {
        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($transactionCardType) && !in_array($transactionCardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transactionCardType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionCardType'] = $transactionCardType;

        return $this;
    }

    /**
     * Gets expDate
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['expDate'];
    }

    /**
     * Sets expDate
     *
     * @param string $expDate Card expire date on form MM-YY
     *
     * @return $this
     */
    public function setExpDate($expDate)
    {
        $this->container['expDate'] = $expDate;

        return $this;
    }

    /**
     * Gets maskedCard
     *
     * @return string
     */
    public function getMaskedCard()
    {
        return $this->container['maskedCard'];
    }

    /**
     * Sets maskedCard
     *
     * @param string $maskedCard Masked card number
     *
     * @return $this
     */
    public function setMaskedCard($maskedCard)
    {
        $this->container['maskedCard'] = $maskedCard;

        return $this;
    }

    /**
     * Gets lastSuccess
     *
     * @return \DateTime
     */
    public function getLastSuccess()
    {
        return $this->container['lastSuccess'];
    }

    /**
     * Sets lastSuccess
     *
     * @param \DateTime $lastSuccess Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setLastSuccess($lastSuccess)
    {
        $this->container['lastSuccess'] = $lastSuccess;

        return $this;
    }

    /**
     * Gets lastFailed
     *
     * @return \DateTime
     */
    public function getLastFailed()
    {
        return $this->container['lastFailed'];
    }

    /**
     * Sets lastFailed
     *
     * @param \DateTime $lastFailed Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setLastFailed($lastFailed)
    {
        $this->container['lastFailed'] = $lastFailed;

        return $this;
    }

    /**
     * Gets firstFail
     *
     * @return \DateTime
     */
    public function getFirstFail()
    {
        return $this->container['firstFail'];
    }

    /**
     * Sets firstFail
     *
     * @param \DateTime $firstFail Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setFirstFail($firstFail)
    {
        $this->container['firstFail'] = $firstFail;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode An error code from the last failed use of the card. See [transaction errors](https://reference.reepay.com/api/#transaction-errors).
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets errorState
     *
     * @return string
     */
    public function getErrorState()
    {
        return $this->container['errorState'];
    }

    /**
     * Sets errorState
     *
     * @param string $errorState Error state from last failed use of the card: `pending`, `soft_declined`, `hard_declined` or `processing_error`
     *
     * @return $this
     */
    public function setErrorState($errorState)
    {
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($errorState) && !in_array($errorState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'errorState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['errorState'] = $errorState;

        return $this;
    }

    /**
     * Gets strongAuthenticationStatus
     *
     * @return string
     */
    public function getStrongAuthenticationStatus()
    {
        return $this->container['strongAuthenticationStatus'];
    }

    /**
     * Sets strongAuthenticationStatus
     *
     * @param string $strongAuthenticationStatus Status for strong customer authentication: `threed_secure` - 3D Secure authenticated, `threed_secure_not_enrolled` - 3D Secure authentication not performed as card not enrolled, `secured_by_nets` - Secure by Nets authenticated
     *
     * @return $this
     */
    public function setStrongAuthenticationStatus($strongAuthenticationStatus)
    {
        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($strongAuthenticationStatus) && !in_array($strongAuthenticationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'strongAuthenticationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strongAuthenticationStatus'] = $strongAuthenticationStatus;

        return $this;
    }

    /**
     * Gets threeDSecureStatus
     *
     * @return string
     */
    public function getThreeDSecureStatus()
    {
        return $this->container['threeDSecureStatus'];
    }

    /**
     * Sets threeDSecureStatus
     *
     * @param string $threeDSecureStatus If 3D Secure authenticated the 3D status will either be `Y` (fully authenticated) or `A` (attempted authenticated). An attempted authentication means that card issuer (e.g. bank) does not support 3D Secure so no full authentication has been performed. Attempted authentication normally means liability shift, but this can differ between acquirers.
     *
     * @return $this
     */
    public function setThreeDSecureStatus($threeDSecureStatus)
    {
        $this->container['threeDSecureStatus'] = $threeDSecureStatus;

        return $this;
    }

    /**
     * Gets riskRule
     *
     * @return string
     */
    public function getRiskRule()
    {
        return $this->container['riskRule'];
    }

    /**
     * Sets riskRule
     *
     * @param string $riskRule If this parameter is set the card has been flagged by Reepay Risk Filter with a flag rule. Special attention may be required before using the card for recurring payments or subscription sign-up.
     *
     * @return $this
     */
    public function setRiskRule($riskRule)
    {
        $this->container['riskRule'] = $riskRule;

        return $this;
    }

    /**
     * Gets cardCountry
     *
     * @return string
     */
    public function getCardCountry()
    {
        return $this->container['cardCountry'];
    }

    /**
     * Sets cardCountry
     *
     * @param string $cardCountry Card issuing country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setCardCountry($cardCountry)
    {
        $this->container['cardCountry'] = $cardCountry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


