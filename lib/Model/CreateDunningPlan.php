<?php
/**
 * CreateDunningPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * CreateDunningPlan Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Reepay
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateDunningPlan implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateDunningPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name' => 'string',
        'schedule' => 'int[]',
        'handle' => 'string',
        'default_plan' => 'bool',
        'final_subscription_action' => 'string',
        'grace_period' => 'string',
        'no_grace_hard_decline' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name' => 'name',
        'schedule' => 'schedule',
        'handle' => 'handle',
        'default_plan' => 'default_plan',
        'final_subscription_action' => 'final_subscription_action',
        'grace_period' => 'grace_period',
        'no_grace_hard_decline' => 'no_grace_hard_decline'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name' => 'setName',
        'schedule' => 'setSchedule',
        'handle' => 'setHandle',
        'default_plan' => 'setDefaultPlan',
        'final_subscription_action' => 'setFinalSubscriptionAction',
        'grace_period' => 'setGracePeriod',
        'no_grace_hard_decline' => 'setNoGraceHardDecline'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name' => 'getName',
        'schedule' => 'getSchedule',
        'handle' => 'getHandle',
        'default_plan' => 'getDefaultPlan',
        'final_subscription_action' => 'getFinalSubscriptionAction',
        'grace_period' => 'getGracePeriod',
        'no_grace_hard_decline' => 'getNoGraceHardDecline'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const FINAL_SUBSCRIPTION_ACTION_EXPIRE = 'expire';
    const FINAL_SUBSCRIPTION_ACTION_ON_HOLD = 'on_hold';
    const FINAL_SUBSCRIPTION_ACTION_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFinalSubscriptionActionAllowableValues()
    {
        return [
            self::FINAL_SUBSCRIPTION_ACTION_EXPIRE,
            self::FINAL_SUBSCRIPTION_ACTION_ON_HOLD,
            self::FINAL_SUBSCRIPTION_ACTION_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['default_plan'] = isset($data['default_plan']) ? $data['default_plan'] : null;
        $this->container['final_subscription_action'] = isset($data['final_subscription_action']) ? $data['final_subscription_action'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['no_grace_hard_decline'] = isset($data['no_grace_hard_decline']) ? $data['no_grace_hard_decline'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalid_properties[] = "'schedule' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalid_properties[] = "'handle' can't be null";
        }
        if ($this->container['default_plan'] === null) {
            $invalid_properties[] = "'default_plan' can't be null";
        }
        if ($this->container['final_subscription_action'] === null) {
            $invalid_properties[] = "'final_subscription_action' can't be null";
        }
        $allowed_values = array("expire", "on_hold", "none");
        if (!in_array($this->container['final_subscription_action'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'final_subscription_action', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['schedule'] === null) {
            return false;
        }
        if ($this->container['handle'] === null) {
            return false;
        }
        if ($this->container['default_plan'] === null) {
            return false;
        }
        if ($this->container['final_subscription_action'] === null) {
            return false;
        }
        $allowed_values = array("expire", "on_hold", "none");
        if (!in_array($this->container['final_subscription_action'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Dunning plan name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets schedule
     * @return int[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param int[] $schedule The schedule as list of intervals in days
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     * @param string $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets default_plan
     * @return bool
     */
    public function getDefaultPlan()
    {
        return $this->container['default_plan'];
    }

    /**
     * Sets default_plan
     * @param bool $default_plan If this is default plan
     * @return $this
     */
    public function setDefaultPlan($default_plan)
    {
        $this->container['default_plan'] = $default_plan;

        return $this;
    }

    /**
     * Gets final_subscription_action
     * @return string
     */
    public function getFinalSubscriptionAction()
    {
        return $this->container['final_subscription_action'];
    }

    /**
     * Sets final_subscription_action
     * @param string $final_subscription_action Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`
     * @return $this
     */
    public function setFinalSubscriptionAction($final_subscription_action)
    {
        $allowed_values = array('expire', 'on_hold', 'none');
        if (!in_array($final_subscription_action, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'final_subscription_action', must be one of 'expire', 'on_hold', 'none'");
        }
        $this->container['final_subscription_action'] = $final_subscription_action;

        return $this;
    }

    /**
     * Gets grace_period
     * @return string
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     * @param string $grace_period Optional grace period before starting dunning process. Also see `no_grace_hard_decline`. If eligible re-trying will be attempted in the grace period. The period is defined as an ISO-8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets no_grace_hard_decline
     * @return bool
     */
    public function getNoGraceHardDecline()
    {
        return $this->container['no_grace_hard_decline'];
    }

    /**
     * Sets no_grace_hard_decline
     * @param bool $no_grace_hard_decline If a grace period has been defined, this parameter can be used to control whether the grace period is only for soft failing invoices. That is, the used payment method is actually eligible for retrying. Default is true.
     * @return $this
     */
    public function setNoGraceHardDecline($no_grace_hard_decline)
    {
        $this->container['no_grace_hard_decline'] = $no_grace_hard_decline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


