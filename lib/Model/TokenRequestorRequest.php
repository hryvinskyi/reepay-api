<?php
/**
 * TokenRequestorRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * TokenRequestorRequest Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenRequestorRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'TokenRequestorRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'name' => 'string',
        'vat' => 'string',
        'test' => 'bool',
        'company_primary_legal_name' => 'string',
        'primary_contact_email' => 'string',
        'company_country_code' => 'string',
        'company_city' => 'string',
        'primary_website_url' => 'string',
        'card_scheme' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'name' => null,
        'vat' => null,
        'test' => null,
        'company_primary_legal_name' => null,
        'primary_contact_email' => null,
        'company_country_code' => null,
        'company_city' => null,
        'primary_website_url' => null,
        'card_scheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vat' => 'vat',
        'test' => 'test',
        'company_primary_legal_name' => 'company_primary_legal_name',
        'primary_contact_email' => 'primary_contact_email',
        'company_country_code' => 'company_country_code',
        'company_city' => 'company_city',
        'primary_website_url' => 'primary_website_url',
        'card_scheme' => 'card_scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vat' => 'setVat',
        'test' => 'setTest',
        'company_primary_legal_name' => 'setCompanyPrimaryLegalName',
        'primary_contact_email' => 'setPrimaryContactEmail',
        'company_country_code' => 'setCompanyCountryCode',
        'company_city' => 'setCompanyCity',
        'primary_website_url' => 'setPrimaryWebsiteUrl',
        'card_scheme' => 'setCardScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vat' => 'getVat',
        'test' => 'getTest',
        'company_primary_legal_name' => 'getCompanyPrimaryLegalName',
        'primary_contact_email' => 'getPrimaryContactEmail',
        'company_country_code' => 'getCompanyCountryCode',
        'company_city' => 'getCompanyCity',
        'primary_website_url' => 'getPrimaryWebsiteUrl',
        'card_scheme' => 'getCardScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARD_SCHEME_VISA = 'visa';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSchemeAllowableValues()
    {
        return [
            self::CARD_SCHEME_VISA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['company_primary_legal_name'] = isset($data['company_primary_legal_name']) ? $data['company_primary_legal_name'] : null;
        $this->container['primary_contact_email'] = isset($data['primary_contact_email']) ? $data['primary_contact_email'] : null;
        $this->container['company_country_code'] = isset($data['company_country_code']) ? $data['company_country_code'] : null;
        $this->container['company_city'] = isset($data['company_city']) ? $data['company_city'] : null;
        $this->container['primary_website_url'] = isset($data['primary_website_url']) ? $data['primary_website_url'] : null;
        $this->container['card_scheme'] = isset($data['card_scheme']) ? $data['card_scheme'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['company_primary_legal_name'] === null) {
            $invalidProperties[] = "'company_primary_legal_name' can't be null";
        }
        if ($this->container['primary_contact_email'] === null) {
            $invalidProperties[] = "'primary_contact_email' can't be null";
        }
        if ($this->container['company_country_code'] === null) {
            $invalidProperties[] = "'company_country_code' can't be null";
        }
        if ($this->container['company_city'] === null) {
            $invalidProperties[] = "'company_city' can't be null";
        }
        if ($this->container['primary_website_url'] === null) {
            $invalidProperties[] = "'primary_website_url' can't be null";
        }
        if ($this->container['card_scheme'] === null) {
            $invalidProperties[] = "'card_scheme' can't be null";
        }
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!is_null($this->container['card_scheme']) && !in_array(
                $this->container['card_scheme'],
                $allowedValues,
                true
            )) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_scheme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat Company VAT
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Is used for testing
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets company_primary_legal_name
     *
     * @return string
     */
    public function getCompanyPrimaryLegalName()
    {
        return $this->container['company_primary_legal_name'];
    }

    /**
     * Sets company_primary_legal_name
     *
     * @param string $company_primary_legal_name Company primary legal name
     *
     * @return $this
     */
    public function setCompanyPrimaryLegalName($company_primary_legal_name)
    {
        $this->container['company_primary_legal_name'] = $company_primary_legal_name;

        return $this;
    }

    /**
     * Gets primary_contact_email
     *
     * @return string
     */
    public function getPrimaryContactEmail()
    {
        return $this->container['primary_contact_email'];
    }

    /**
     * Sets primary_contact_email
     *
     * @param string $primary_contact_email Company primary contact email
     *
     * @return $this
     */
    public function setPrimaryContactEmail($primary_contact_email)
    {
        $this->container['primary_contact_email'] = $primary_contact_email;

        return $this;
    }

    /**
     * Gets company_country_code
     *
     * @return string
     */
    public function getCompanyCountryCode()
    {
        return $this->container['company_country_code'];
    }

    /**
     * Sets company_country_code
     *
     * @param string $company_country_code Company country code
     *
     * @return $this
     */
    public function setCompanyCountryCode($company_country_code)
    {
        $this->container['company_country_code'] = $company_country_code;

        return $this;
    }

    /**
     * Gets company_city
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['company_city'];
    }

    /**
     * Sets company_city
     *
     * @param string $company_city Company city
     *
     * @return $this
     */
    public function setCompanyCity($company_city)
    {
        $this->container['company_city'] = $company_city;

        return $this;
    }

    /**
     * Gets primary_website_url
     *
     * @return string
     */
    public function getPrimaryWebsiteUrl()
    {
        return $this->container['primary_website_url'];
    }

    /**
     * Sets primary_website_url
     *
     * @param string $primary_website_url Company primary website url
     *
     * @return $this
     */
    public function setPrimaryWebsiteUrl($primary_website_url)
    {
        $this->container['primary_website_url'] = $primary_website_url;

        return $this;
    }

    /**
     * Gets card_scheme
     *
     * @return string
     */
    public function getCardScheme()
    {
        return $this->container['card_scheme'];
    }

    /**
     * Sets card_scheme
     *
     * @param string $card_scheme Card scheme
     *
     * @return $this
     */
    public function setCardScheme($card_scheme)
    {
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!in_array($card_scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_scheme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_scheme'] = $card_scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
