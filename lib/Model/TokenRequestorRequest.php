<?php
/**
 * TokenRequestorRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * TokenRequestorRequest Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenRequestorRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'TokenRequestorRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'name' => 'string',
        'vat' => 'string',
        'test' => 'bool',
        'companyPrimaryLegalName' => 'string',
        'primaryContactEmail' => 'string',
        'companyCountryCode' => 'string',
        'companyCity' => 'string',
        'primaryWebsiteUrl' => 'string',
        'cardScheme' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'name' => null,
        'vat' => null,
        'test' => null,
        'companyPrimaryLegalName' => null,
        'primaryContactEmail' => null,
        'companyCountryCode' => null,
        'companyCity' => null,
        'primaryWebsiteUrl' => null,
        'cardScheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vat' => 'vat',
        'test' => 'test',
        'companyPrimaryLegalName' => 'company_primary_legal_name',
        'primaryContactEmail' => 'primary_contact_email',
        'companyCountryCode' => 'company_country_code',
        'companyCity' => 'company_city',
        'primaryWebsiteUrl' => 'primary_website_url',
        'cardScheme' => 'card_scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vat' => 'setVat',
        'test' => 'setTest',
        'companyPrimaryLegalName' => 'setCompanyPrimaryLegalName',
        'primaryContactEmail' => 'setPrimaryContactEmail',
        'companyCountryCode' => 'setCompanyCountryCode',
        'companyCity' => 'setCompanyCity',
        'primaryWebsiteUrl' => 'setPrimaryWebsiteUrl',
        'cardScheme' => 'setCardScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vat' => 'getVat',
        'test' => 'getTest',
        'companyPrimaryLegalName' => 'getCompanyPrimaryLegalName',
        'primaryContactEmail' => 'getPrimaryContactEmail',
        'companyCountryCode' => 'getCompanyCountryCode',
        'companyCity' => 'getCompanyCity',
        'primaryWebsiteUrl' => 'getPrimaryWebsiteUrl',
        'cardScheme' => 'getCardScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARD_SCHEME_VISA = 'visa';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSchemeAllowableValues()
    {
        return [
            self::CARD_SCHEME_VISA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['companyPrimaryLegalName'] = isset($data['companyPrimaryLegalName']) ? $data['companyPrimaryLegalName'] : null;
        $this->container['primaryContactEmail'] = isset($data['primaryContactEmail']) ? $data['primaryContactEmail'] : null;
        $this->container['companyCountryCode'] = isset($data['companyCountryCode']) ? $data['companyCountryCode'] : null;
        $this->container['companyCity'] = isset($data['companyCity']) ? $data['companyCity'] : null;
        $this->container['primaryWebsiteUrl'] = isset($data['primaryWebsiteUrl']) ? $data['primaryWebsiteUrl'] : null;
        $this->container['cardScheme'] = isset($data['cardScheme']) ? $data['cardScheme'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['companyPrimaryLegalName'] === null) {
            $invalidProperties[] = "'companyPrimaryLegalName' can't be null";
        }
        if ($this->container['primaryContactEmail'] === null) {
            $invalidProperties[] = "'primaryContactEmail' can't be null";
        }
        if ($this->container['companyCountryCode'] === null) {
            $invalidProperties[] = "'companyCountryCode' can't be null";
        }
        if ($this->container['companyCity'] === null) {
            $invalidProperties[] = "'companyCity' can't be null";
        }
        if ($this->container['primaryWebsiteUrl'] === null) {
            $invalidProperties[] = "'primaryWebsiteUrl' can't be null";
        }
        if ($this->container['cardScheme'] === null) {
            $invalidProperties[] = "'cardScheme' can't be null";
        }
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!is_null($this->container['cardScheme']) && !in_array(
                $this->container['cardScheme'],
                $allowedValues,
                true
            )) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cardScheme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat Company VAT
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Is used for testing
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets companyPrimaryLegalName
     *
     * @return string
     */
    public function getCompanyPrimaryLegalName()
    {
        return $this->container['companyPrimaryLegalName'];
    }

    /**
     * Sets companyPrimaryLegalName
     *
     * @param string $companyPrimaryLegalName Company primary legal name
     *
     * @return $this
     */
    public function setCompanyPrimaryLegalName($companyPrimaryLegalName)
    {
        $this->container['companyPrimaryLegalName'] = $companyPrimaryLegalName;

        return $this;
    }

    /**
     * Gets primaryContactEmail
     *
     * @return string
     */
    public function getPrimaryContactEmail()
    {
        return $this->container['primaryContactEmail'];
    }

    /**
     * Sets primaryContactEmail
     *
     * @param string $primaryContactEmail Company primary contact email
     *
     * @return $this
     */
    public function setPrimaryContactEmail($primaryContactEmail)
    {
        $this->container['primaryContactEmail'] = $primaryContactEmail;

        return $this;
    }

    /**
     * Gets companyCountryCode
     *
     * @return string
     */
    public function getCompanyCountryCode()
    {
        return $this->container['companyCountryCode'];
    }

    /**
     * Sets companyCountryCode
     *
     * @param string $companyCountryCode Company country code
     *
     * @return $this
     */
    public function setCompanyCountryCode($companyCountryCode)
    {
        $this->container['companyCountryCode'] = $companyCountryCode;

        return $this;
    }

    /**
     * Gets companyCity
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['companyCity'];
    }

    /**
     * Sets companyCity
     *
     * @param string $companyCity Company city
     *
     * @return $this
     */
    public function setCompanyCity($companyCity)
    {
        $this->container['companyCity'] = $companyCity;

        return $this;
    }

    /**
     * Gets primaryWebsiteUrl
     *
     * @return string
     */
    public function getPrimaryWebsiteUrl()
    {
        return $this->container['primaryWebsiteUrl'];
    }

    /**
     * Sets primaryWebsiteUrl
     *
     * @param string $primaryWebsiteUrl Company primary website url
     *
     * @return $this
     */
    public function setPrimaryWebsiteUrl($primaryWebsiteUrl)
    {
        $this->container['primaryWebsiteUrl'] = $primaryWebsiteUrl;

        return $this;
    }

    /**
     * Gets cardScheme
     *
     * @return string
     */
    public function getCardScheme()
    {
        return $this->container['cardScheme'];
    }

    /**
     * Sets cardScheme
     *
     * @param string $cardScheme Card scheme
     *
     * @return $this
     */
    public function setCardScheme($cardScheme)
    {
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!in_array($cardScheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cardScheme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardScheme'] = $cardScheme;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
