<?php
/**
 * CardGatewayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * CardGatewayAgreement Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Reepay
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardGatewayAgreement implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CardGatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'currencies' => 'string[]',
        'surcharge' => 'bool',
        'provider' => 'string',
        'card_types' => 'string[]',
        'payment_types' => 'string[]',
        'provider_settings' => 'map[string,object]',
        'fee_configuration' => 'map[string,object][]',
        'threed_secure' => 'bool',
        'threed_secure_recurring' => 'bool',
        'secured_by_nets' => 'bool',
        'secured_by_nets_recurring' => 'bool',
        'default_require_sca' => 'bool',
        'disallow_threed_secure_attempted' => 'bool',
        'three_d_secure_version' => 'int',
        'gw_ref' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'currencies' => 'currencies',
        'surcharge' => 'surcharge',
        'provider' => 'provider',
        'card_types' => 'card_types',
        'payment_types' => 'payment_types',
        'provider_settings' => 'provider_settings',
        'fee_configuration' => 'fee_configuration',
        'threed_secure' => 'threed_secure',
        'threed_secure_recurring' => 'threed_secure_recurring',
        'secured_by_nets' => 'secured_by_nets',
        'secured_by_nets_recurring' => 'secured_by_nets_recurring',
        'default_require_sca' => 'default_require_sca',
        'disallow_threed_secure_attempted' => 'disallow_threed_secure_attempted',
        'three_d_secure_version' => 'three_d_secure_version',
        'gw_ref' => 'gw_ref'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'currencies' => 'setCurrencies',
        'surcharge' => 'setSurcharge',
        'provider' => 'setProvider',
        'card_types' => 'setCardTypes',
        'payment_types' => 'setPaymentTypes',
        'provider_settings' => 'setProviderSettings',
        'fee_configuration' => 'setFeeConfiguration',
        'threed_secure' => 'setThreedSecure',
        'threed_secure_recurring' => 'setThreedSecureRecurring',
        'secured_by_nets' => 'setSecuredByNets',
        'secured_by_nets_recurring' => 'setSecuredByNetsRecurring',
        'default_require_sca' => 'setDefaultRequireSca',
        'disallow_threed_secure_attempted' => 'setDisallowThreedSecureAttempted',
        'three_d_secure_version' => 'setThreeDSecureVersion',
        'gw_ref' => 'setGwRef'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'currencies' => 'getCurrencies',
        'surcharge' => 'getSurcharge',
        'provider' => 'getProvider',
        'card_types' => 'getCardTypes',
        'payment_types' => 'getPaymentTypes',
        'provider_settings' => 'getProviderSettings',
        'fee_configuration' => 'getFeeConfiguration',
        'threed_secure' => 'getThreedSecure',
        'threed_secure_recurring' => 'getThreedSecureRecurring',
        'secured_by_nets' => 'getSecuredByNets',
        'secured_by_nets_recurring' => 'getSecuredByNetsRecurring',
        'default_require_sca' => 'getDefaultRequireSca',
        'disallow_threed_secure_attempted' => 'getDisallowThreedSecureAttempted',
        'three_d_secure_version' => 'getThreeDSecureVersion',
        'gw_ref' => 'getGwRef'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const THREE_D_SECURE_VERSION_1 = 1;
    const THREE_D_SECURE_VERSION_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getThreeDSecureVersionAllowableValues()
    {
        return [
            self::THREE_D_SECURE_VERSION_1,
            self::THREE_D_SECURE_VERSION_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['card_types'] = isset($data['card_types']) ? $data['card_types'] : null;
        $this->container['payment_types'] = isset($data['payment_types']) ? $data['payment_types'] : null;
        $this->container['provider_settings'] = isset($data['provider_settings']) ? $data['provider_settings'] : null;
        $this->container['fee_configuration'] = isset($data['fee_configuration']) ? $data['fee_configuration'] : null;
        $this->container['threed_secure'] = isset($data['threed_secure']) ? $data['threed_secure'] : null;
        $this->container['threed_secure_recurring'] = isset($data['threed_secure_recurring']) ? $data['threed_secure_recurring'] : null;
        $this->container['secured_by_nets'] = isset($data['secured_by_nets']) ? $data['secured_by_nets'] : null;
        $this->container['secured_by_nets_recurring'] = isset($data['secured_by_nets_recurring']) ? $data['secured_by_nets_recurring'] : null;
        $this->container['default_require_sca'] = isset($data['default_require_sca']) ? $data['default_require_sca'] : null;
        $this->container['disallow_threed_secure_attempted'] = isset($data['disallow_threed_secure_attempted']) ? $data['disallow_threed_secure_attempted'] : null;
        $this->container['three_d_secure_version'] = isset($data['three_d_secure_version']) ? $data['three_d_secure_version'] : null;
        $this->container['gw_ref'] = isset($data['gw_ref']) ? $data['gw_ref'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['currencies'] === null) {
            $invalid_properties[] = "'currencies' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalid_properties[] = "'provider' can't be null";
        }
        $allowed_values = array("1", "2");
        if (!in_array($this->container['three_d_secure_version'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'three_d_secure_version', must be one of #{allowed_values}.";
        }

        if ($this->container['gw_ref'] === null) {
            $invalid_properties[] = "'gw_ref' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['currencies'] === null) {
            return false;
        }
        if ($this->container['provider'] === null) {
            return false;
        }
        $allowed_values = array("1", "2");
        if (!in_array($this->container['three_d_secure_version'], $allowed_values)) {
            return false;
        }
        if ($this->container['gw_ref'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets currencies
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     * @param string[] $currencies Set of currencies supported by agreement. Each currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code.
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets surcharge
     * @return bool
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     * @param bool $surcharge Add acquirer surcharge fee if possible
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider Card gateway provider type
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets card_types
     * @return string[]
     */
    public function getCardTypes()
    {
        return $this->container['card_types'];
    }

    /**
     * Sets card_types
     * @param string[] $card_types Card types supported by agreement
     * @return $this
     */
    public function setCardTypes($card_types)
    {
        $this->container['card_types'] = $card_types;

        return $this;
    }

    /**
     * Gets payment_types
     * @return string[]
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     * @param string[] $payment_types Set of supported payment types for agreement: `card`, `applepay`, `googlepay`, `mobilepay`, `vipps`. If not defined defaults to all.
     * @return $this
     */
    public function setPaymentTypes($payment_types)
    {
        $this->container['payment_types'] = $payment_types;

        return $this;
    }

    /**
     * Gets provider_settings
     * @return map[string,object]
     */
    public function getProviderSettings()
    {
        return $this->container['provider_settings'];
    }

    /**
     * Sets provider_settings
     * @param map[string,object] $provider_settings Key value map of provider settings
     * @return $this
     */
    public function setProviderSettings($provider_settings)
    {
        $this->container['provider_settings'] = $provider_settings;

        return $this;
    }

    /**
     * Gets fee_configuration
     * @return map[string,object][]
     */
    public function getFeeConfiguration()
    {
        return $this->container['fee_configuration'];
    }

    /**
     * Sets fee_configuration
     * @param map[string,object][] $fee_configuration Prioritized list of fee configuration entries
     * @return $this
     */
    public function setFeeConfiguration($fee_configuration)
    {
        $this->container['fee_configuration'] = $fee_configuration;

        return $this;
    }

    /**
     * Gets threed_secure
     * @return bool
     */
    public function getThreedSecure()
    {
        return $this->container['threed_secure'];
    }

    /**
     * Sets threed_secure
     * @param bool $threed_secure Use 3DSecure for non-recurring payments (if supported by provider)
     * @return $this
     */
    public function setThreedSecure($threed_secure)
    {
        $this->container['threed_secure'] = $threed_secure;

        return $this;
    }

    /**
     * Gets threed_secure_recurring
     * @return bool
     */
    public function getThreedSecureRecurring()
    {
        return $this->container['threed_secure_recurring'];
    }

    /**
     * Sets threed_secure_recurring
     * @param bool $threed_secure_recurring Use 3DSecure for recurring payments (if supported by provider)
     * @return $this
     */
    public function setThreedSecureRecurring($threed_secure_recurring)
    {
        $this->container['threed_secure_recurring'] = $threed_secure_recurring;

        return $this;
    }

    /**
     * Gets secured_by_nets
     * @return bool
     */
    public function getSecuredByNets()
    {
        return $this->container['secured_by_nets'];
    }

    /**
     * Sets secured_by_nets
     * @param bool $secured_by_nets Use Secured By Nets for non-recurring payments (if supported by provider)
     * @return $this
     */
    public function setSecuredByNets($secured_by_nets)
    {
        $this->container['secured_by_nets'] = $secured_by_nets;

        return $this;
    }

    /**
     * Gets secured_by_nets_recurring
     * @return bool
     */
    public function getSecuredByNetsRecurring()
    {
        return $this->container['secured_by_nets_recurring'];
    }

    /**
     * Sets secured_by_nets_recurring
     * @param bool $secured_by_nets_recurring Use Secured By Nets for recurring payments (if supported by provider)
     * @return $this
     */
    public function setSecuredByNetsRecurring($secured_by_nets_recurring)
    {
        $this->container['secured_by_nets_recurring'] = $secured_by_nets_recurring;

        return $this;
    }

    /**
     * Gets default_require_sca
     * @return bool
     */
    public function getDefaultRequireSca()
    {
        return $this->container['default_require_sca'];
    }

    /**
     * Sets default_require_sca
     * @param bool $default_require_sca Default behaviour if no specific SCA handing is defined in payment sessions. If enabled SCA will be required and un-enrolled cards will be declined.
     * @return $this
     */
    public function setDefaultRequireSca($default_require_sca)
    {
        $this->container['default_require_sca'] = $default_require_sca;

        return $this;
    }

    /**
     * Gets disallow_threed_secure_attempted
     * @return bool
     */
    public function getDisallowThreedSecureAttempted()
    {
        return $this->container['disallow_threed_secure_attempted'];
    }

    /**
     * Sets disallow_threed_secure_attempted
     * @param bool $disallow_threed_secure_attempted Disallow 3D Secure status attempted which means that card issuer does not support 3D Secure so authentication could not be performed. An attempted 3D Secure flow normally results in liability shift.
     * @return $this
     */
    public function setDisallowThreedSecureAttempted($disallow_threed_secure_attempted)
    {
        $this->container['disallow_threed_secure_attempted'] = $disallow_threed_secure_attempted;

        return $this;
    }

    /**
     * Gets three_d_secure_version
     * @return int
     */
    public function getThreeDSecureVersion()
    {
        return $this->container['three_d_secure_version'];
    }

    /**
     * Sets three_d_secure_version
     * @param int $three_d_secure_version Use specific 3DS version
     * @return $this
     */
    public function setThreeDSecureVersion($three_d_secure_version)
    {
        $allowed_values = array('1', '2');
        if (!in_array($three_d_secure_version, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'three_d_secure_version', must be one of '1', '2'");
        }
        $this->container['three_d_secure_version'] = $three_d_secure_version;

        return $this;
    }

    /**
     * Gets gw_ref
     * @return string
     */
    public function getGwRef()
    {
        return $this->container['gw_ref'];
    }

    /**
     * Sets gw_ref
     * @param string $gw_ref Card gateway reference id
     * @return $this
     */
    public function setGwRef($gw_ref)
    {
        $this->container['gw_ref'] = $gw_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


