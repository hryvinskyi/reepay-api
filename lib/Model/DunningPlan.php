<?php
/**
 * DunningPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * DunningPlan Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DunningPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DunningPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'schedule' => 'int[]',
        'handle' => 'string',
        'state' => 'string',
        'created' => '\DateTime',
        'defaultPlan' => 'bool',
        'finalSubscriptionAction' => 'string',
        'gracePeriod' => 'string',
        'noGraceHardDecline' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'schedule' => 'int32',
        'handle' => null,
        'state' => null,
        'created' => 'date-time',
        'defaultPlan' => null,
        'finalSubscriptionAction' => null,
        'gracePeriod' => null,
        'noGraceHardDecline' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'schedule' => 'schedule',
        'handle' => 'handle',
        'state' => 'state',
        'created' => 'created',
        'defaultPlan' => 'default_plan',
        'finalSubscriptionAction' => 'final_subscription_action',
        'gracePeriod' => 'grace_period',
        'noGraceHardDecline' => 'no_grace_hard_decline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'schedule' => 'setSchedule',
        'handle' => 'setHandle',
        'state' => 'setState',
        'created' => 'setCreated',
        'defaultPlan' => 'setDefaultPlan',
        'finalSubscriptionAction' => 'setFinalSubscriptionAction',
        'gracePeriod' => 'setGracePeriod',
        'noGraceHardDecline' => 'setNoGraceHardDecline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'schedule' => 'getSchedule',
        'handle' => 'getHandle',
        'state' => 'getState',
        'created' => 'getCreated',
        'defaultPlan' => 'getDefaultPlan',
        'finalSubscriptionAction' => 'getFinalSubscriptionAction',
        'gracePeriod' => 'getGracePeriod',
        'noGraceHardDecline' => 'getNoGraceHardDecline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';
    const FINAL_SUBSCRIPTION_ACTION_EXPIRE = 'expire';
    const FINAL_SUBSCRIPTION_ACTION_ON_HOLD = 'on_hold';
    const FINAL_SUBSCRIPTION_ACTION_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinalSubscriptionActionAllowableValues()
    {
        return [
            self::FINAL_SUBSCRIPTION_ACTION_EXPIRE,
            self::FINAL_SUBSCRIPTION_ACTION_ON_HOLD,
            self::FINAL_SUBSCRIPTION_ACTION_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['defaultPlan'] = isset($data['defaultPlan']) ? $data['defaultPlan'] : null;
        $this->container['finalSubscriptionAction'] = isset($data['finalSubscriptionAction']) ? $data['finalSubscriptionAction'] : null;
        $this->container['gracePeriod'] = isset($data['gracePeriod']) ? $data['gracePeriod'] : null;
        $this->container['noGraceHardDecline'] = isset($data['noGraceHardDecline']) ? $data['noGraceHardDecline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['defaultPlan'] === null) {
            $invalidProperties[] = "'defaultPlan' can't be null";
        }
        if ($this->container['finalSubscriptionAction'] === null) {
            $invalidProperties[] = "'finalSubscriptionAction' can't be null";
        }
        $allowedValues = $this->getFinalSubscriptionActionAllowableValues();
        if (!is_null($this->container['finalSubscriptionAction']) && !in_array($this->container['finalSubscriptionAction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'finalSubscriptionAction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Dunning plan name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return int[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param int[] $schedule The schedule as list of intervals in days
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of dunning plan, one of the following: `active`, `deleted`.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets defaultPlan
     *
     * @return bool
     */
    public function getDefaultPlan()
    {
        return $this->container['defaultPlan'];
    }

    /**
     * Sets defaultPlan
     *
     * @param bool $defaultPlan If this is default plan
     *
     * @return $this
     */
    public function setDefaultPlan($defaultPlan)
    {
        $this->container['defaultPlan'] = $defaultPlan;

        return $this;
    }

    /**
     * Gets finalSubscriptionAction
     *
     * @return string
     */
    public function getFinalSubscriptionAction()
    {
        return $this->container['finalSubscriptionAction'];
    }

    /**
     * Sets finalSubscriptionAction
     *
     * @param string $finalSubscriptionAction Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`
     *
     * @return $this
     */
    public function setFinalSubscriptionAction($finalSubscriptionAction)
    {
        $allowedValues = $this->getFinalSubscriptionActionAllowableValues();
        if (!in_array($finalSubscriptionAction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'finalSubscriptionAction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['finalSubscriptionAction'] = $finalSubscriptionAction;

        return $this;
    }

    /**
     * Gets gracePeriod
     *
     * @return string
     */
    public function getGracePeriod()
    {
        return $this->container['gracePeriod'];
    }

    /**
     * Sets gracePeriod
     *
     * @param string $gracePeriod Optional grace period before starting dunning process. Also see `no_grace_hard_decline`. If eligible re-trying will be attempted in the grace period. The period is defined as an ISO-8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations
     *
     * @return $this
     */
    public function setGracePeriod($gracePeriod)
    {
        $this->container['gracePeriod'] = $gracePeriod;

        return $this;
    }

    /**
     * Gets noGraceHardDecline
     *
     * @return bool
     */
    public function getNoGraceHardDecline()
    {
        return $this->container['noGraceHardDecline'];
    }

    /**
     * Sets noGraceHardDecline
     *
     * @param bool $noGraceHardDecline If a grace period has been defined, this parameter can be used to control whether the grace period is only for soft failing invoices. That is, the used payment method is actually eligible for retrying. Default is true.
     *
     * @return $this
     */
    public function setNoGraceHardDecline($noGraceHardDecline)
    {
        $this->container['noGraceHardDecline'] = $noGraceHardDecline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
