<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'handle' => 'string',
        'customer' => 'string',
        'subscription' => 'string',
        'plan' => 'string',
        'state' => 'string',
        'processing' => 'bool',
        'type' => 'string',
        'amount' => 'int',
        'number' => 'int',
        'currency' => 'string',
        'due' => '\DateTime',
        'failed' => '\DateTime',
        'settled' => '\DateTime',
        'cancelled' => '\DateTime',
        'authorized' => '\DateTime',
        'credits' => '\Reepay\Model\CreditInvoice[]',
        'created' => '\DateTime',
        'planVersion' => 'int',
        'dunningPlan' => 'string',
        'discountAmount' => 'int',
        'orgAmount' => 'int',
        'amountVat' => 'int',
        'amountExVat' => 'int',
        'settledAmount' => 'int',
        'refundedAmount' => 'int',
        'authorizedAmount' => 'int',
        'creditedAmount' => 'int',
        'periodNumber' => 'int',
        'recurringPaymentMethod' => 'string',
        'orderLines' => '\Reepay\Model\OrderLine[]',
        'additionalCosts' => 'string[]',
        'transactions' => '\Reepay\Model\Transaction[]',
        'creditNotes' => '\Reepay\Model\InvoiceCreditNote[]',
        'dunningStart' => '\DateTime',
        'dunningCount' => 'int',
        'dunningExpired' => '\DateTime',
        'periodFrom' => '\DateTime',
        'periodTo' => '\DateTime',
        'settleLater' => 'bool',
        'settleLaterPaymentMethod' => 'string',
        'billingAddress' => '\Reepay\Model\InvoiceBillingAddress',
        'shippingAddress' => '\Reepay\Model\InvoiceShippingAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'handle' => null,
        'customer' => null,
        'subscription' => null,
        'plan' => null,
        'state' => null,
        'processing' => null,
        'type' => null,
        'amount' => 'int32',
        'number' => 'int32',
        'currency' => null,
        'due' => 'date-time',
        'failed' => 'date-time',
        'settled' => 'date-time',
        'cancelled' => 'date-time',
        'authorized' => 'date-time',
        'credits' => null,
        'created' => 'date-time',
        'planVersion' => 'int32',
        'dunningPlan' => null,
        'discountAmount' => 'int32',
        'orgAmount' => 'int32',
        'amountVat' => 'int32',
        'amountExVat' => 'int32',
        'settledAmount' => 'int32',
        'refundedAmount' => 'int32',
        'authorizedAmount' => 'int32',
        'creditedAmount' => 'int32',
        'periodNumber' => 'int32',
        'recurringPaymentMethod' => null,
        'orderLines' => null,
        'additionalCosts' => null,
        'transactions' => null,
        'creditNotes' => null,
        'dunningStart' => 'date-time',
        'dunningCount' => 'int32',
        'dunningExpired' => 'date-time',
        'periodFrom' => 'date-time',
        'periodTo' => 'date-time',
        'settleLater' => null,
        'settleLaterPaymentMethod' => null,
        'billingAddress' => null,
        'shippingAddress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'handle' => 'handle',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'state' => 'state',
        'processing' => 'processing',
        'type' => 'type',
        'amount' => 'amount',
        'number' => 'number',
        'currency' => 'currency',
        'due' => 'due',
        'failed' => 'failed',
        'settled' => 'settled',
        'cancelled' => 'cancelled',
        'authorized' => 'authorized',
        'credits' => 'credits',
        'created' => 'created',
        'planVersion' => 'plan_version',
        'dunningPlan' => 'dunning_plan',
        'discountAmount' => 'discount_amount',
        'orgAmount' => 'org_amount',
        'amountVat' => 'amount_vat',
        'amountExVat' => 'amount_ex_vat',
        'settledAmount' => 'settled_amount',
        'refundedAmount' => 'refunded_amount',
        'authorizedAmount' => 'authorized_amount',
        'creditedAmount' => 'credited_amount',
        'periodNumber' => 'period_number',
        'recurringPaymentMethod' => 'recurring_payment_method',
        'orderLines' => 'order_lines',
        'additionalCosts' => 'additional_costs',
        'transactions' => 'transactions',
        'creditNotes' => 'credit_notes',
        'dunningStart' => 'dunning_start',
        'dunningCount' => 'dunning_count',
        'dunningExpired' => 'dunning_expired',
        'periodFrom' => 'period_from',
        'periodTo' => 'period_to',
        'settleLater' => 'settle_later',
        'settleLaterPaymentMethod' => 'settle_later_payment_method',
        'billingAddress' => 'billing_address',
        'shippingAddress' => 'shipping_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'handle' => 'setHandle',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'state' => 'setState',
        'processing' => 'setProcessing',
        'type' => 'setType',
        'amount' => 'setAmount',
        'number' => 'setNumber',
        'currency' => 'setCurrency',
        'due' => 'setDue',
        'failed' => 'setFailed',
        'settled' => 'setSettled',
        'cancelled' => 'setCancelled',
        'authorized' => 'setAuthorized',
        'credits' => 'setCredits',
        'created' => 'setCreated',
        'planVersion' => 'setPlanVersion',
        'dunningPlan' => 'setDunningPlan',
        'discountAmount' => 'setDiscountAmount',
        'orgAmount' => 'setOrgAmount',
        'amountVat' => 'setAmountVat',
        'amountExVat' => 'setAmountExVat',
        'settledAmount' => 'setSettledAmount',
        'refundedAmount' => 'setRefundedAmount',
        'authorizedAmount' => 'setAuthorizedAmount',
        'creditedAmount' => 'setCreditedAmount',
        'periodNumber' => 'setPeriodNumber',
        'recurringPaymentMethod' => 'setRecurringPaymentMethod',
        'orderLines' => 'setOrderLines',
        'additionalCosts' => 'setAdditionalCosts',
        'transactions' => 'setTransactions',
        'creditNotes' => 'setCreditNotes',
        'dunningStart' => 'setDunningStart',
        'dunningCount' => 'setDunningCount',
        'dunningExpired' => 'setDunningExpired',
        'periodFrom' => 'setPeriodFrom',
        'periodTo' => 'setPeriodTo',
        'settleLater' => 'setSettleLater',
        'settleLaterPaymentMethod' => 'setSettleLaterPaymentMethod',
        'billingAddress' => 'setBillingAddress',
        'shippingAddress' => 'setShippingAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'handle' => 'getHandle',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'state' => 'getState',
        'processing' => 'getProcessing',
        'type' => 'getType',
        'amount' => 'getAmount',
        'number' => 'getNumber',
        'currency' => 'getCurrency',
        'due' => 'getDue',
        'failed' => 'getFailed',
        'settled' => 'getSettled',
        'cancelled' => 'getCancelled',
        'authorized' => 'getAuthorized',
        'credits' => 'getCredits',
        'created' => 'getCreated',
        'planVersion' => 'getPlanVersion',
        'dunningPlan' => 'getDunningPlan',
        'discountAmount' => 'getDiscountAmount',
        'orgAmount' => 'getOrgAmount',
        'amountVat' => 'getAmountVat',
        'amountExVat' => 'getAmountExVat',
        'settledAmount' => 'getSettledAmount',
        'refundedAmount' => 'getRefundedAmount',
        'authorizedAmount' => 'getAuthorizedAmount',
        'creditedAmount' => 'getCreditedAmount',
        'periodNumber' => 'getPeriodNumber',
        'recurringPaymentMethod' => 'getRecurringPaymentMethod',
        'orderLines' => 'getOrderLines',
        'additionalCosts' => 'getAdditionalCosts',
        'transactions' => 'getTransactions',
        'creditNotes' => 'getCreditNotes',
        'dunningStart' => 'getDunningStart',
        'dunningCount' => 'getDunningCount',
        'dunningExpired' => 'getDunningExpired',
        'periodFrom' => 'getPeriodFrom',
        'periodTo' => 'getPeriodTo',
        'settleLater' => 'getSettleLater',
        'settleLaterPaymentMethod' => 'getSettleLaterPaymentMethod',
        'billingAddress' => 'getBillingAddress',
        'shippingAddress' => 'getShippingAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_CREATED = 'created';
    const STATE_PENDING = 'pending';
    const STATE_DUNNING = 'dunning';
    const STATE_SETTLED = 'settled';
    const STATE_AUTHORIZED = 'authorized';
    const STATE_CANCELLED = 'cancelled';
    const STATE_FAILED = 'failed';
    const TYPE_S = 's';
    const TYPE_SO = 'so';
    const TYPE_SOI = 'soi';
    const TYPE_CO = 'co';
    const TYPE_CH = 'ch';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_CREATED,
            self::STATE_PENDING,
            self::STATE_DUNNING,
            self::STATE_SETTLED,
            self::STATE_AUTHORIZED,
            self::STATE_CANCELLED,
            self::STATE_FAILED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_S,
            self::TYPE_SO,
            self::TYPE_SOI,
            self::TYPE_CO,
            self::TYPE_CH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['processing'] = isset($data['processing']) ? $data['processing'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['settled'] = isset($data['settled']) ? $data['settled'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['authorized'] = isset($data['authorized']) ? $data['authorized'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['planVersion'] = isset($data['planVersion']) ? $data['planVersion'] : null;
        $this->container['dunningPlan'] = isset($data['dunningPlan']) ? $data['dunningPlan'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['orgAmount'] = isset($data['orgAmount']) ? $data['orgAmount'] : null;
        $this->container['amountVat'] = isset($data['amountVat']) ? $data['amountVat'] : null;
        $this->container['amountExVat'] = isset($data['amountExVat']) ? $data['amountExVat'] : null;
        $this->container['settledAmount'] = isset($data['settledAmount']) ? $data['settledAmount'] : null;
        $this->container['refundedAmount'] = isset($data['refundedAmount']) ? $data['refundedAmount'] : null;
        $this->container['authorizedAmount'] = isset($data['authorizedAmount']) ? $data['authorizedAmount'] : null;
        $this->container['creditedAmount'] = isset($data['creditedAmount']) ? $data['creditedAmount'] : null;
        $this->container['periodNumber'] = isset($data['periodNumber']) ? $data['periodNumber'] : null;
        $this->container['recurringPaymentMethod'] = isset($data['recurringPaymentMethod']) ? $data['recurringPaymentMethod'] : null;
        $this->container['orderLines'] = isset($data['orderLines']) ? $data['orderLines'] : null;
        $this->container['additionalCosts'] = isset($data['additionalCosts']) ? $data['additionalCosts'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['creditNotes'] = isset($data['creditNotes']) ? $data['creditNotes'] : null;
        $this->container['dunningStart'] = isset($data['dunningStart']) ? $data['dunningStart'] : null;
        $this->container['dunningCount'] = isset($data['dunningCount']) ? $data['dunningCount'] : null;
        $this->container['dunningExpired'] = isset($data['dunningExpired']) ? $data['dunningExpired'] : null;
        $this->container['periodFrom'] = isset($data['periodFrom']) ? $data['periodFrom'] : null;
        $this->container['periodTo'] = isset($data['periodTo']) ? $data['periodTo'] : null;
        $this->container['settleLater'] = isset($data['settleLater']) ? $data['settleLater'] : null;
        $this->container['settleLaterPaymentMethod'] = isset($data['settleLaterPaymentMethod']) ? $data['settleLaterPaymentMethod'] : null;
        $this->container['billingAddress'] = isset($data['billingAddress']) ? $data['billingAddress'] : null;
        $this->container['shippingAddress'] = isset($data['shippingAddress']) ? $data['shippingAddress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['due'] === null) {
            $invalidProperties[] = "'due' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['discountAmount'] === null) {
            $invalidProperties[] = "'discountAmount' can't be null";
        }
        if ($this->container['orgAmount'] === null) {
            $invalidProperties[] = "'orgAmount' can't be null";
        }
        if ($this->container['amountVat'] === null) {
            $invalidProperties[] = "'amountVat' can't be null";
        }
        if ($this->container['amountExVat'] === null) {
            $invalidProperties[] = "'amountExVat' can't be null";
        }
        if ($this->container['settledAmount'] === null) {
            $invalidProperties[] = "'settledAmount' can't be null";
        }
        if ($this->container['refundedAmount'] === null) {
            $invalidProperties[] = "'refundedAmount' can't be null";
        }
        if ($this->container['orderLines'] === null) {
            $invalidProperties[] = "'orderLines' can't be null";
        }
        if ($this->container['additionalCosts'] === null) {
            $invalidProperties[] = "'additionalCosts' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Invoice id assigned by Reepay
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string $subscription Subscription handle, will be null for a one-time customer invoice
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The invoice state one of the following: `created`, `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets processing
     *
     * @return bool
     */
    public function getProcessing()
    {
        return $this->container['processing'];
    }

    /**
     * Sets processing
     *
     * @param bool $processing For asynchronous payment methods, e.g. MobilePay subscriptions, this flag indicates that an invoice transaction is in state processing and is awaiting result.
     *
     * @return $this
     */
    public function setProcessing($processing)
    {
        $this->container['processing'] = $processing;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The invoice amount including VAT
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Sequential invoice number. Only present for subscription and customer invoices.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency for the account in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets due
     *
     * @return \DateTime
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param \DateTime $due When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime $failed When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets settled
     *
     * @return \DateTime
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     *
     * @param \DateTime $settled When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setSettled($settled)
    {
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return \DateTime
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param \DateTime $cancelled When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return \DateTime
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param \DateTime $authorized When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setAuthorized($authorized)
    {
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Reepay\Model\CreditInvoice[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Reepay\Model\CreditInvoice[] $credits Credits applied to invoice
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets planVersion
     *
     * @return int
     */
    public function getPlanVersion()
    {
        return $this->container['planVersion'];
    }

    /**
     * Sets planVersion
     *
     * @param int $planVersion Subscription plan version
     *
     * @return $this
     */
    public function setPlanVersion($planVersion)
    {
        $this->container['planVersion'] = $planVersion;

        return $this;
    }

    /**
     * Gets dunningPlan
     *
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->container['dunningPlan'];
    }

    /**
     * Sets dunningPlan
     *
     * @param string $dunningPlan Dunning plan handle
     *
     * @return $this
     */
    public function setDunningPlan($dunningPlan)
    {
        $this->container['dunningPlan'] = $dunningPlan;

        return $this;
    }

    /**
     * Gets discountAmount
     *
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     *
     * @param int $discountAmount The potential discount amount deducted from the invoice amount including VAT
     *
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets orgAmount
     *
     * @return int
     */
    public function getOrgAmount()
    {
        return $this->container['orgAmount'];
    }

    /**
     * Sets orgAmount
     *
     * @param int $orgAmount The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice
     *
     * @return $this
     */
    public function setOrgAmount($orgAmount)
    {
        $this->container['orgAmount'] = $orgAmount;

        return $this;
    }

    /**
     * Gets amountVat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amountVat'];
    }

    /**
     * Sets amountVat
     *
     * @param int $amountVat The invoice vat amount calculated as rounded summed fractional vats for each orderline
     *
     * @return $this
     */
    public function setAmountVat($amountVat)
    {
        $this->container['amountVat'] = $amountVat;

        return $this;
    }

    /**
     * Gets amountExVat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amountExVat'];
    }

    /**
     * Sets amountExVat
     *
     * @param int $amountExVat The invoice amount without vat
     *
     * @return $this
     */
    public function setAmountExVat($amountExVat)
    {
        $this->container['amountExVat'] = $amountExVat;

        return $this;
    }

    /**
     * Gets settledAmount
     *
     * @return int
     */
    public function getSettledAmount()
    {
        return $this->container['settledAmount'];
    }

    /**
     * Sets settledAmount
     *
     * @param int $settledAmount Settled amount
     *
     * @return $this
     */
    public function setSettledAmount($settledAmount)
    {
        $this->container['settledAmount'] = $settledAmount;

        return $this;
    }

    /**
     * Gets refundedAmount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refundedAmount'];
    }

    /**
     * Sets refundedAmount
     *
     * @param int $refundedAmount Refunded amount
     *
     * @return $this
     */
    public function setRefundedAmount($refundedAmount)
    {
        $this->container['refundedAmount'] = $refundedAmount;

        return $this;
    }

    /**
     * Gets authorizedAmount
     *
     * @return int
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorizedAmount'];
    }

    /**
     * Sets authorizedAmount
     *
     * @param int $authorizedAmount Authorized amount
     *
     * @return $this
     */
    public function setAuthorizedAmount($authorizedAmount)
    {
        $this->container['authorizedAmount'] = $authorizedAmount;

        return $this;
    }

    /**
     * Gets creditedAmount
     *
     * @return int
     */
    public function getCreditedAmount()
    {
        return $this->container['creditedAmount'];
    }

    /**
     * Sets creditedAmount
     *
     * @param int $creditedAmount Credited amount
     *
     * @return $this
     */
    public function setCreditedAmount($creditedAmount)
    {
        $this->container['creditedAmount'] = $creditedAmount;

        return $this;
    }

    /**
     * Gets periodNumber
     *
     * @return int
     */
    public function getPeriodNumber()
    {
        return $this->container['periodNumber'];
    }

    /**
     * Sets periodNumber
     *
     * @param int $periodNumber The subscription period this invoice is for
     *
     * @return $this
     */
    public function setPeriodNumber($periodNumber)
    {
        $this->container['periodNumber'] = $periodNumber;

        return $this;
    }

    /**
     * Gets recurringPaymentMethod
     *
     * @return string
     */
    public function getRecurringPaymentMethod()
    {
        return $this->container['recurringPaymentMethod'];
    }

    /**
     * Sets recurringPaymentMethod
     *
     * @param string $recurringPaymentMethod Optional reference to recurring payment method created in conjunction with charging
     *
     * @return $this
     */
    public function setRecurringPaymentMethod($recurringPaymentMethod)
    {
        $this->container['recurringPaymentMethod'] = $recurringPaymentMethod;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \Reepay\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \Reepay\Model\OrderLine[] $orderLines Order lines for invoice sorted by descending timestamp
     *
     * @return $this
     */
    public function setOrderLines($orderLines)
    {
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets additionalCosts
     *
     * @return string[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     *
     * @param string[] $additionalCosts Additional cost handles for any additional costs added to this invoice
     *
     * @return $this
     */
    public function setAdditionalCosts($additionalCosts)
    {
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Reepay\Model\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Reepay\Model\Transaction[] $transactions Invoice transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets creditNotes
     *
     * @return \Reepay\Model\InvoiceCreditNote[]
     */
    public function getCreditNotes()
    {
        return $this->container['creditNotes'];
    }

    /**
     * Sets creditNotes
     *
     * @param \Reepay\Model\InvoiceCreditNote[] $creditNotes Invoice credit notes
     *
     * @return $this
     */
    public function setCreditNotes($creditNotes)
    {
        $this->container['creditNotes'] = $creditNotes;

        return $this;
    }

    /**
     * Gets dunningStart
     *
     * @return \DateTime
     */
    public function getDunningStart()
    {
        return $this->container['dunningStart'];
    }

    /**
     * Sets dunningStart
     *
     * @param \DateTime $dunningStart When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDunningStart($dunningStart)
    {
        $this->container['dunningStart'] = $dunningStart;

        return $this;
    }

    /**
     * Gets dunningCount
     *
     * @return int
     */
    public function getDunningCount()
    {
        return $this->container['dunningCount'];
    }

    /**
     * Sets dunningCount
     *
     * @param int $dunningCount Number of dunning events for invoice (number of reminders sent)
     *
     * @return $this
     */
    public function setDunningCount($dunningCount)
    {
        $this->container['dunningCount'] = $dunningCount;

        return $this;
    }

    /**
     * Gets dunningExpired
     *
     * @return \DateTime
     */
    public function getDunningExpired()
    {
        return $this->container['dunningExpired'];
    }

    /**
     * Sets dunningExpired
     *
     * @param \DateTime $dunningExpired When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDunningExpired($dunningExpired)
    {
        $this->container['dunningExpired'] = $dunningExpired;

        return $this;
    }

    /**
     * Gets periodFrom
     *
     * @return \DateTime
     */
    public function getPeriodFrom()
    {
        return $this->container['periodFrom'];
    }

    /**
     * Sets periodFrom
     *
     * @param \DateTime $periodFrom The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodFrom($periodFrom)
    {
        $this->container['periodFrom'] = $periodFrom;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return \DateTime
     */
    public function getPeriodTo()
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param \DateTime $periodTo The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodTo($periodTo)
    {
        $this->container['periodTo'] = $periodTo;

        return $this;
    }

    /**
     * Gets settleLater
     *
     * @return bool
     */
    public function getSettleLater()
    {
        return $this->container['settleLater'];
    }

    /**
     * Sets settleLater
     *
     * @param bool $settleLater Whether this is a customer one-time invoice that will be settled later
     *
     * @return $this
     */
    public function setSettleLater($settleLater)
    {
        $this->container['settleLater'] = $settleLater;

        return $this;
    }

    /**
     * Gets settleLaterPaymentMethod
     *
     * @return string
     */
    public function getSettleLaterPaymentMethod()
    {
        return $this->container['settleLaterPaymentMethod'];
    }

    /**
     * Sets settleLaterPaymentMethod
     *
     * @param string $settleLaterPaymentMethod The payment method to use for a later settle of a one-time customer invoice
     *
     * @return $this
     */
    public function setSettleLaterPaymentMethod($settleLaterPaymentMethod)
    {
        $this->container['settleLaterPaymentMethod'] = $settleLaterPaymentMethod;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \Reepay\Model\InvoiceBillingAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \Reepay\Model\InvoiceBillingAddress $billingAddress billingAddress
     *
     * @return $this
     */
    public function setBillingAddress($billingAddress)
    {
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \Reepay\Model\InvoiceShippingAddress
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \Reepay\Model\InvoiceShippingAddress $shippingAddress shippingAddress
     *
     * @return $this
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
