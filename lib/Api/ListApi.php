<?php
/**
 * ListApi
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Api;

use \Reepay\Configuration;
use \Reepay\ApiClient;
use \Reepay\ApiException;
use \Reepay\ObjectSerializer;

/**
 * ListApi Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListApi
{

    /**
     * API Client
     *
     * @var \Reepay\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Reepay\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Reepay\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.reepay.com/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Reepay\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Reepay\ApiClient $apiClient set the API client
     *
     * @return ListApi
     */
    public function setApiClient(\Reepay\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getChargeList
     *
     * Get list of charges
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;settled&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Invoice handle prefix (optional)
     * @param string[] $state Invoice state, multiple can be defined (optional)
     * @param string[] $exclude_state Invoice state to exclude, multiple can be defined (optional)
     * @param string $customer Invoices for customer by customer handle (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $refunded_amount Refunded amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $authorized_amount Authorized amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Invoice currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param bool $partial_settled Filter invoices based on partial settled. If &#x60;true&#x60; invoices where &#x60;authorized_amount &lt; settled_amount&#x60; is returned. If &#x60;false&#x60; invoices where &#x60;settled_amount &#x3D; authorized_amount&#x60; is returned. (optional)
     * @return \Reepay\Model\ChargeList
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getChargeList($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null)
    {
        list($response) = $this->getChargeListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled);
        return $response;
    }

    /**
     * Operation getChargeListWithHttpInfo
     *
     * Get list of charges
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;settled&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Invoice handle prefix (optional)
     * @param string[] $state Invoice state, multiple can be defined (optional)
     * @param string[] $exclude_state Invoice state to exclude, multiple can be defined (optional)
     * @param string $customer Invoices for customer by customer handle (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $refunded_amount Refunded amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $authorized_amount Authorized amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Invoice currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param bool $partial_settled Filter invoices based on partial settled. If &#x60;true&#x60; invoices where &#x60;authorized_amount &lt; settled_amount&#x60; is returned. If &#x60;false&#x60; invoices where &#x60;settled_amount &#x3D; authorized_amount&#x60; is returned. (optional)
     * @return Array of \Reepay\Model\ChargeList, HTTP status code, HTTP response headers (array of strings)
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getChargeListWithHttpInfo($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null)
    {
        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getChargeList, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 10.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getChargeList, must be bigger than or equal to 10.0.');
        }

        // parse inputs
        $resourcePath = "/v1/list/charge";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = $this->apiClient->getSerializer()->toQueryValue($next_page_token);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = $this->apiClient->getSerializer()->toQueryValue($handle);
        }
        // query params
        if (is_array($state)) {
            $state = $this->apiClient->getSerializer()->serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if (is_array($exclude_state)) {
            $exclude_state = $this->apiClient->getSerializer()->serializeCollection($exclude_state, 'multi', true);
        }
        if ($exclude_state !== null) {
            $queryParams['exclude_state'] = $this->apiClient->getSerializer()->toQueryValue($exclude_state);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = $this->apiClient->getSerializer()->toQueryValue($customer);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($refunded_amount !== null) {
            $queryParams['refunded_amount'] = $this->apiClient->getSerializer()->toQueryValue($refunded_amount);
        }
        // query params
        if ($authorized_amount !== null) {
            $queryParams['authorized_amount'] = $this->apiClient->getSerializer()->toQueryValue($authorized_amount);
        }
        // query params
        if (is_array($currency)) {
            $currency = $this->apiClient->getSerializer()->serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($partial_settled !== null) {
            $queryParams['partial_settled'] = $this->apiClient->getSerializer()->toQueryValue($partial_settled);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Reepay\Model\ChargeList',
                '/v1/list/charge'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Reepay\Model\ChargeList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ChargeList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerList
     *
     * Get list of customers
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Can only be the default &#x60;created&#x60; (optional, default to created)
     * @param string $handle Customer handle prefix (optional)
     * @param string $name Search for name contained in first name concatenated with last name (optional)
     * @param string $email Customer email (optional)
     * @param string $first_name Contained in customer first name (optional)
     * @param string $last_name Contained in customer last name (optional)
     * @param string $address Contained in customer address (optional)
     * @param string $address2 Contained in customer address2 (optional)
     * @param string $postal_code Contained in customer postal code (optional)
     * @param string $city Contained in customer city (optional)
     * @param string $country Customer country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (optional)
     * @param string $phone Contained in customer phone (optional)
     * @param string $company Contained in customer company (optional)
     * @param string $vat Contained in customer vat code (optional)
     * @return \Reepay\Model\CustomerList
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getCustomerList($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $name = null, $email = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null)
    {
        list($response) = $this->getCustomerListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $name, $email, $first_name, $last_name, $address, $address2, $postal_code, $city, $country, $phone, $company, $vat);
        return $response;
    }

    /**
     * Operation getCustomerListWithHttpInfo
     *
     * Get list of customers
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Can only be the default &#x60;created&#x60; (optional, default to created)
     * @param string $handle Customer handle prefix (optional)
     * @param string $name Search for name contained in first name concatenated with last name (optional)
     * @param string $email Customer email (optional)
     * @param string $first_name Contained in customer first name (optional)
     * @param string $last_name Contained in customer last name (optional)
     * @param string $address Contained in customer address (optional)
     * @param string $address2 Contained in customer address2 (optional)
     * @param string $postal_code Contained in customer postal code (optional)
     * @param string $city Contained in customer city (optional)
     * @param string $country Customer country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (optional)
     * @param string $phone Contained in customer phone (optional)
     * @param string $company Contained in customer company (optional)
     * @param string $vat Contained in customer vat code (optional)
     * @return Array of \Reepay\Model\CustomerList, HTTP status code, HTTP response headers (array of strings)
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getCustomerListWithHttpInfo($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $name = null, $email = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null)
    {
        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCustomerList, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 10.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCustomerList, must be bigger than or equal to 10.0.');
        }

        // parse inputs
        $resourcePath = "/v1/list/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = $this->apiClient->getSerializer()->toQueryValue($next_page_token);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = $this->apiClient->getSerializer()->toQueryValue($handle);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = $this->apiClient->getSerializer()->toQueryValue($address);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = $this->apiClient->getSerializer()->toQueryValue($address2);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['postal_code'] = $this->apiClient->getSerializer()->toQueryValue($postal_code);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        // query params
        if ($company !== null) {
            $queryParams['company'] = $this->apiClient->getSerializer()->toQueryValue($company);
        }
        // query params
        if ($vat !== null) {
            $queryParams['vat'] = $this->apiClient->getSerializer()->toQueryValue($vat);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Reepay\Model\CustomerList',
                '/v1/list/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Reepay\Model\CustomerList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\CustomerList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoiceList
     *
     * Get list of invoices
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;settled&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Invoice handle prefix (optional)
     * @param string[] $state Invoice state, multiple can be defined (optional)
     * @param string[] $exclude_state Invoice state to exclude, multiple can be defined (optional)
     * @param string $customer Invoices for customer by customer handle (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $refunded_amount Refunded amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $authorized_amount Authorized amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Invoice currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param bool $partial_settled Filter invoices based on partial settled. If &#x60;true&#x60; invoices where &#x60;authorized_amount &lt; settled_amount&#x60; is returned. If &#x60;false&#x60; invoices where &#x60;settled_amount &#x3D; authorized_amount&#x60; is returned. (optional)
     * @param string[] $type Invoice type, multiple can be defined. &#x60;s&#x60; - subscription recurring, &#x60;so&#x60; - subscription one-time, &#x60;soi&#x60; - subscription one-time instant, &#x60;co&#x60; - customer one-time, &#x60;ch&#x60; - charge (optional)
     * @param string $subscription Invoices for subscription by subscription handle (optional)
     * @param string $plan Invoices for subscription plan by subscription plan handle (optional)
     * @param string $dunning_start Dunning start date and time in local date time interval for account timezone. Date time given in ISO-8601 local date or local date time. See documentation of intervals. (optional)
     * @param string $dunning_success Dunning success date and time in local date time interval for account timezone. Date time given in ISO-8601 local date or local date time. See documentation of intervals. (optional)
     * @param int $number Invoice number if subscription invoice (optional)
     * @param string $due Due date if due date defined for subscription invoice (optional)
     * @return \Reepay\Model\InvoiceList
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getInvoiceList($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        list($response) = $this->getInvoiceListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $type, $subscription, $plan, $dunning_start, $dunning_success, $number, $due);
        return $response;
    }

    /**
     * Operation getInvoiceListWithHttpInfo
     *
     * Get list of invoices
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;settled&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Invoice handle prefix (optional)
     * @param string[] $state Invoice state, multiple can be defined (optional)
     * @param string[] $exclude_state Invoice state to exclude, multiple can be defined (optional)
     * @param string $customer Invoices for customer by customer handle (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $refunded_amount Refunded amount in minor unit interval. See documentation of intervals. (optional)
     * @param string $authorized_amount Authorized amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Invoice currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param bool $partial_settled Filter invoices based on partial settled. If &#x60;true&#x60; invoices where &#x60;authorized_amount &lt; settled_amount&#x60; is returned. If &#x60;false&#x60; invoices where &#x60;settled_amount &#x3D; authorized_amount&#x60; is returned. (optional)
     * @param string[] $type Invoice type, multiple can be defined. &#x60;s&#x60; - subscription recurring, &#x60;so&#x60; - subscription one-time, &#x60;soi&#x60; - subscription one-time instant, &#x60;co&#x60; - customer one-time, &#x60;ch&#x60; - charge (optional)
     * @param string $subscription Invoices for subscription by subscription handle (optional)
     * @param string $plan Invoices for subscription plan by subscription plan handle (optional)
     * @param string $dunning_start Dunning start date and time in local date time interval for account timezone. Date time given in ISO-8601 local date or local date time. See documentation of intervals. (optional)
     * @param string $dunning_success Dunning success date and time in local date time interval for account timezone. Date time given in ISO-8601 local date or local date time. See documentation of intervals. (optional)
     * @param int $number Invoice number if subscription invoice (optional)
     * @param string $due Due date if due date defined for subscription invoice (optional)
     * @return Array of \Reepay\Model\InvoiceList, HTTP status code, HTTP response headers (array of strings)
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getInvoiceListWithHttpInfo($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceList, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 10.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceList, must be bigger than or equal to 10.0.');
        }

        if (!is_null($number) && ($number < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling ListApi.getInvoiceList, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/v1/list/invoice";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = $this->apiClient->getSerializer()->toQueryValue($next_page_token);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = $this->apiClient->getSerializer()->toQueryValue($handle);
        }
        // query params
        if (is_array($state)) {
            $state = $this->apiClient->getSerializer()->serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if (is_array($exclude_state)) {
            $exclude_state = $this->apiClient->getSerializer()->serializeCollection($exclude_state, 'multi', true);
        }
        if ($exclude_state !== null) {
            $queryParams['exclude_state'] = $this->apiClient->getSerializer()->toQueryValue($exclude_state);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = $this->apiClient->getSerializer()->toQueryValue($customer);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($refunded_amount !== null) {
            $queryParams['refunded_amount'] = $this->apiClient->getSerializer()->toQueryValue($refunded_amount);
        }
        // query params
        if ($authorized_amount !== null) {
            $queryParams['authorized_amount'] = $this->apiClient->getSerializer()->toQueryValue($authorized_amount);
        }
        // query params
        if (is_array($currency)) {
            $currency = $this->apiClient->getSerializer()->serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($partial_settled !== null) {
            $queryParams['partial_settled'] = $this->apiClient->getSerializer()->toQueryValue($partial_settled);
        }
        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'multi', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($subscription !== null) {
            $queryParams['subscription'] = $this->apiClient->getSerializer()->toQueryValue($subscription);
        }
        // query params
        if ($plan !== null) {
            $queryParams['plan'] = $this->apiClient->getSerializer()->toQueryValue($plan);
        }
        // query params
        if ($dunning_start !== null) {
            $queryParams['dunning_start'] = $this->apiClient->getSerializer()->toQueryValue($dunning_start);
        }
        // query params
        if ($dunning_success !== null) {
            $queryParams['dunning_success'] = $this->apiClient->getSerializer()->toQueryValue($dunning_success);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = $this->apiClient->getSerializer()->toQueryValue($number);
        }
        // query params
        if ($due !== null) {
            $queryParams['due'] = $this->apiClient->getSerializer()->toQueryValue($due);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Reepay\Model\InvoiceList',
                '/v1/list/invoice'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Reepay\Model\InvoiceList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\InvoiceList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPayoutList
     *
     * Get list of payouts
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;paid&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Payout handle prefix (optional)
     * @param string $customer Payouts for customer by customer handle (optional)
     * @param string[] $state Payout transaction state, multiple can be defined (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Payout currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param string $card Payouts for saved card (optional)
     * @param string $card_type Payouts for card type (optional)
     * @param string $card_prefix Payouts for card with prefix (optional)
     * @param string $card_postfix Payouts for card with postfix (optional)
     * @param string $card_fingerprint Payouts for card with postfix (optional)
     * @return \Reepay\Model\PayoutList
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getPayoutList($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        list($response) = $this->getPayoutListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $customer, $state, $amount, $currency, $card, $card_type, $card_prefix, $card_postfix, $card_fingerprint);
        return $response;
    }

    /**
     * Operation getPayoutListWithHttpInfo
     *
     * Get list of payouts
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60; or &#x60;paid&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string $handle Payout handle prefix (optional)
     * @param string $customer Payouts for customer by customer handle (optional)
     * @param string[] $state Payout transaction state, multiple can be defined (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $currency Payout currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param string $card Payouts for saved card (optional)
     * @param string $card_type Payouts for card type (optional)
     * @param string $card_prefix Payouts for card with prefix (optional)
     * @param string $card_postfix Payouts for card with postfix (optional)
     * @param string $card_fingerprint Payouts for card with postfix (optional)
     * @return Array of \Reepay\Model\PayoutList, HTTP status code, HTTP response headers (array of strings)
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getPayoutListWithHttpInfo($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $handle = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPayoutList, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 10.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPayoutList, must be bigger than or equal to 10.0.');
        }

        // parse inputs
        $resourcePath = "/v1/list/payout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = $this->apiClient->getSerializer()->toQueryValue($next_page_token);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = $this->apiClient->getSerializer()->toQueryValue($handle);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = $this->apiClient->getSerializer()->toQueryValue($customer);
        }
        // query params
        if (is_array($state)) {
            $state = $this->apiClient->getSerializer()->serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if (is_array($currency)) {
            $currency = $this->apiClient->getSerializer()->serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($card !== null) {
            $queryParams['card'] = $this->apiClient->getSerializer()->toQueryValue($card);
        }
        // query params
        if ($card_type !== null) {
            $queryParams['card_type'] = $this->apiClient->getSerializer()->toQueryValue($card_type);
        }
        // query params
        if ($card_prefix !== null) {
            $queryParams['card_prefix'] = $this->apiClient->getSerializer()->toQueryValue($card_prefix);
        }
        // query params
        if ($card_postfix !== null) {
            $queryParams['card_postfix'] = $this->apiClient->getSerializer()->toQueryValue($card_postfix);
        }
        // query params
        if ($card_fingerprint !== null) {
            $queryParams['card_fingerprint'] = $this->apiClient->getSerializer()->toQueryValue($card_fingerprint);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Reepay\Model\PayoutList',
                '/v1/list/payout'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Reepay\Model\PayoutList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\PayoutList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTransactionList
     *
     * Get list of transactions
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60;, &#x60;settled&#x60;, &#x60;authorized&#x60;, &#x60;refunded&#x60; or &#x60;failed&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string[] $type Transaction type, multiple can be defined. Types: &#x60;settle&#x60;, &#x60;refund&#x60; and &#x60;authorization&#x60; (optional)
     * @param string[] $state Transaction state, multiple can be defined. States: &#x60;pending&#x60;, &#x60;authorized&#x60;, &#x60;processing&#x60;, &#x60;settled&#x60;, &#x60;refunded&#x60;, &#x60;failed&#x60; and &#x60;cancelled&#x60; (optional)
     * @param string[] $payment_type Transaction payment type, multiple can be defined. &#x60;card&#x60;, &#x60;mobilepay&#x60;, &#x60;vipps&#x60;, &#x60;swish&#x60;, &#x60;viabill&#x60;, &#x60;manual&#x60;, &#x60;applepay&#x60;, &#x60;googlepay&#x60;, &#x60;paypal&#x60;, &#x60;klarna_pay_now&#x60;, &#x60;klarna_pay_later&#x60;, &#x60;klarna_slice_it&#x60;, &#x60;klarna_direct_bank_transfer&#x60;, &#x60;klarna_direct_debit&#x60;, &#x60;resurs&#x60;, &#x60;ideal&#x60;, &#x60;p24&#x60;, &#x60;blik&#x60; or &#x60;mobilepay_subscriptions&#x60; (optional)
     * @param string $invoice Transactions for invoice by invoice handle (optional)
     * @param string[] $currency Currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $card_type Transactions for card type. Multiple can be defined. &#x60;unknown&#x60;, &#x60;visa&#x60;, &#x60;mc&#x60;, &#x60;dankort&#x60;, &#x60;visa_dk&#x60;, &#x60;ffk&#x60;, &#x60;visa_elec&#x60;, &#x60;maestro&#x60;, &#x60;laser&#x60;, &#x60;amex&#x60;, &#x60;diners&#x60;, &#x60;discover&#x60; or &#x60;jcb&#x60; (optional)
     * @param string $card_prefix Transactions for card with prefix (optional)
     * @param string $card_postfix Transactions for card with postfix (optional)
     * @param string $card_fingerprint Transactions for card with postfix (optional)
     * @param string[] $card_country Transactions with card country. Multiple can be defined. In  in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)
     * @param string $card_gateway Transactions with card gateway. (optional)
     * @param string $payment_method Transactions using saved payment method (optional)
     * @return \Reepay\Model\TransactionList
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getTransactionList($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null)
    {
        list($response) = $this->getTransactionListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $type, $state, $payment_type, $invoice, $currency, $amount, $card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $payment_method);
        return $response;
    }

    /**
     * Operation getTransactionListWithHttpInfo
     *
     * Get list of transactions
     *
     * @param string $from Time range from (inclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Default from if no &#x60;interval&#x60; is given depends on the query. If the query limits on relation e.g. customer and/or subscription, the default from will be epoch 1970-01-01, otherwise one month before &#x60;to&#x60; (optional)
     * @param string $to Time range to (exclusive). Local date and time (according to account timezone) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60;, &#x60;yyyy-MM-ddTHH:mm:ss&#x60; or &#x60;yyyy-MM-ddTHH:mm:ss.SSS&#x60;. Defaults to now. (optional)
     * @param string $interval Limit from &#x60;to&#x60; and interval back in time. E.g. one week. Will take precedence over &#x60;from&#x60;. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations (optional)
     * @param int $size Page size between 10 and 100 (default 20) (optional, default to 20)
     * @param string $next_page_token Next page token from previous response to get next page (optional)
     * @param string $range Time and date attribute to time limit. Either &#x60;created&#x60;, &#x60;settled&#x60;, &#x60;authorized&#x60;, &#x60;refunded&#x60; or &#x60;failed&#x60;. Default is &#x60;created&#x60;. (optional, default to created)
     * @param string[] $type Transaction type, multiple can be defined. Types: &#x60;settle&#x60;, &#x60;refund&#x60; and &#x60;authorization&#x60; (optional)
     * @param string[] $state Transaction state, multiple can be defined. States: &#x60;pending&#x60;, &#x60;authorized&#x60;, &#x60;processing&#x60;, &#x60;settled&#x60;, &#x60;refunded&#x60;, &#x60;failed&#x60; and &#x60;cancelled&#x60; (optional)
     * @param string[] $payment_type Transaction payment type, multiple can be defined. &#x60;card&#x60;, &#x60;mobilepay&#x60;, &#x60;vipps&#x60;, &#x60;swish&#x60;, &#x60;viabill&#x60;, &#x60;manual&#x60;, &#x60;applepay&#x60;, &#x60;googlepay&#x60;, &#x60;paypal&#x60;, &#x60;klarna_pay_now&#x60;, &#x60;klarna_pay_later&#x60;, &#x60;klarna_slice_it&#x60;, &#x60;klarna_direct_bank_transfer&#x60;, &#x60;klarna_direct_debit&#x60;, &#x60;resurs&#x60;, &#x60;ideal&#x60;, &#x60;p24&#x60;, &#x60;blik&#x60; or &#x60;mobilepay_subscriptions&#x60; (optional)
     * @param string $invoice Transactions for invoice by invoice handle (optional)
     * @param string[] $currency Currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param string[] $card_type Transactions for card type. Multiple can be defined. &#x60;unknown&#x60;, &#x60;visa&#x60;, &#x60;mc&#x60;, &#x60;dankort&#x60;, &#x60;visa_dk&#x60;, &#x60;ffk&#x60;, &#x60;visa_elec&#x60;, &#x60;maestro&#x60;, &#x60;laser&#x60;, &#x60;amex&#x60;, &#x60;diners&#x60;, &#x60;discover&#x60; or &#x60;jcb&#x60; (optional)
     * @param string $card_prefix Transactions for card with prefix (optional)
     * @param string $card_postfix Transactions for card with postfix (optional)
     * @param string $card_fingerprint Transactions for card with postfix (optional)
     * @param string[] $card_country Transactions with card country. Multiple can be defined. In  in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). (optional)
     * @param string $card_gateway Transactions with card gateway. (optional)
     * @param string $payment_method Transactions using saved payment method (optional)
     * @return Array of \Reepay\Model\TransactionList, HTTP status code, HTTP response headers (array of strings)
     * @throws \Reepay\ApiException on non-2xx response
     */
    public function getTransactionListWithHttpInfo($from = null, $to = null, $interval = null, $size = null, $next_page_token = null, $range = null, $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null)
    {
        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTransactionList, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 10.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTransactionList, must be bigger than or equal to 10.0.');
        }

        // parse inputs
        $resourcePath = "/v1/list/transaction";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = $this->apiClient->getSerializer()->toQueryValue($interval);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = $this->apiClient->getSerializer()->toQueryValue($next_page_token);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = $this->apiClient->getSerializer()->toQueryValue($range);
        }
        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'multi', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if (is_array($state)) {
            $state = $this->apiClient->getSerializer()->serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if (is_array($payment_type)) {
            $payment_type = $this->apiClient->getSerializer()->serializeCollection($payment_type, 'multi', true);
        }
        if ($payment_type !== null) {
            $queryParams['payment_type'] = $this->apiClient->getSerializer()->toQueryValue($payment_type);
        }
        // query params
        if ($invoice !== null) {
            $queryParams['invoice'] = $this->apiClient->getSerializer()->toQueryValue($invoice);
        }
        // query params
        if (is_array($currency)) {
            $currency = $this->apiClient->getSerializer()->serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if (is_array($card_type)) {
            $card_type = $this->apiClient->getSerializer()->serializeCollection($card_type, 'multi', true);
        }
        if ($card_type !== null) {
            $queryParams['card_type'] = $this->apiClient->getSerializer()->toQueryValue($card_type);
        }
        // query params
        if ($card_prefix !== null) {
            $queryParams['card_prefix'] = $this->apiClient->getSerializer()->toQueryValue($card_prefix);
        }
        // query params
        if ($card_postfix !== null) {
            $queryParams['card_postfix'] = $this->apiClient->getSerializer()->toQueryValue($card_postfix);
        }
        // query params
        if ($card_fingerprint !== null) {
            $queryParams['card_fingerprint'] = $this->apiClient->getSerializer()->toQueryValue($card_fingerprint);
        }
        // query params
        if (is_array($card_country)) {
            $card_country = $this->apiClient->getSerializer()->serializeCollection($card_country, 'multi', true);
        }
        if ($card_country !== null) {
            $queryParams['card_country'] = $this->apiClient->getSerializer()->toQueryValue($card_country);
        }
        // query params
        if ($card_gateway !== null) {
            $queryParams['card_gateway'] = $this->apiClient->getSerializer()->toQueryValue($card_gateway);
        }
        // query params
        if ($payment_method !== null) {
            $queryParams['payment_method'] = $this->apiClient->getSerializer()->toQueryValue($payment_method);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Reepay\Model\TransactionList',
                '/v1/list/transaction'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Reepay\Model\TransactionList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\TransactionList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Reepay\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
